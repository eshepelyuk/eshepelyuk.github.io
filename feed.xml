<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JK&#39;s blog</title>
    <description>Simple blog for some thoughts to be shared. Mostly about Java programming.
</description>
    <link>http://eshepelyuk.github.io/</link>
    <atom:link href="http://eshepelyuk.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 23 Oct 2014 18:11:55 +0000</pubDate>
    <lastBuildDate>Thu, 23 Oct 2014 18:11:55 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>CodingDojoCnUa #6</title>
        <description>&lt;h1&gt;CodingDojoCnUa #6&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, 28th of July, our CodingDojoCnUa community successfully conducted 6th Coding Dojo.
We met at Chernihiv&amp;#8217;s office of SysIQ, as few times before.
The subject of our session was &lt;code&gt;RomanNumerals&lt;/code&gt; kata - description can be found by &lt;a href=&quot;http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals&quot;&gt;HERE&lt;/a&gt;.
Main thing distinguishing this Dojo from previous ones was splitting the attendees into two separate teams
that were working on their own without shared &lt;em&gt;Design Session&lt;/em&gt;.
Each team was responsible for figuring out own implementation and eventually produced working code together with unit tests.
Both implementation can be found at GitHub&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eshepelyuk/CodingDojoCnUa/tree/master/Dojo6/teamA&quot; target=&quot;_blank&quot;&gt;Code for TeamA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eshepelyuk/CodingDojoCnUa/tree/master/Dojo6/teamB&quot; target=&quot;_blank&quot;&gt;Code for TeamB&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-ve-discovered&quot;&gt;What we&amp;#8217;ve discovered&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First things to mention that team provided completely different solutions to the same problem.
Relative simplicity of Kata seemed to help coders to split task into smaller parts thus supporting true incremental development,
concentrating on providing small slices of functionality after creating failed test.
Unlike previous times there were no attempts to create &lt;code&gt;God Functions&lt;/code&gt; immediately after start of Dojo.
Although longer Design Sessions are essential to make team move faster and effectively with incremental development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second main observation is that few peoples who don&amp;#8217;t use TDD on daily basis realized that this approach
could significantly affect original design of algorithm and even imposes final design.
On retrospective meeting one of us described this impression&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
People saw TDD in action.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3rd and the shortest - &lt;code&gt;CoffeeScript&lt;/code&gt; tastes better each time you try it :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-re-gonna-try-next-time&quot;&gt;What we&amp;#8217;re gonna try next time ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apparently largest negative issue raised on retro was isolation of members within own team and lack of inter-team communication.
Attendees suggested various options, even tackle more complicated task than kata,
like some sort of network game, and go through complete process of application development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But finally we agreed on just to exchange team members in the middle of next Dojo
to see if this is helpful for coding and / or brings more fun to the event :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some photos &lt;a href=&quot;http://www.facebook.com/media/set/?set=oa.378960365504429&amp;amp;type=1&quot; target=&quot;_blank&quot;&gt;@Facebook&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/28/codingdojocnua-6.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/28/codingdojocnua-6.html</guid>
        
        <category>roman numerals</category>
        
        <category>coffeescript</category>
        
        <category>coding dojo</category>
        
        <category>kata</category>
        
        
      </item>
    
      <item>
        <title>WebDriver tricks - part 3</title>
        <description>&lt;h1&gt;WebDriver tricks - part 3&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s common case for dynamic pages to show / hide some elements basing on user&amp;#8217;s actions.
But covering them with stable WebDriver tests could be sometimes cumbersome.
I&amp;#8217;ll try to explain couple of techniques helping to deal with that sort of web pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-1&quot;&gt;Case #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First approach I&amp;#8217;d like to describe is rendering all the elements on page load but set CSS &lt;code&gt;display&lt;/code&gt; property to &lt;code&gt;none&lt;/code&gt;
and later set it to empty or &lt;code&gt;block&lt;/code&gt; to make element visible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case we can&amp;#8217;t just check visibility by using &lt;code&gt;webDriver.findElement(&amp;#8230;&amp;#8203;)&lt;/code&gt; since it will return valid element but we don&amp;#8217;t know if it visible or not.
Fortunately &lt;code&gt;WebElement&lt;/code&gt; interface has method &lt;code&gt;isDisplayed()&lt;/code&gt;, however obvious solution &lt;code&gt;webDriver.findElement(&amp;#8230;&amp;#8203;).isDisplayed()&lt;/code&gt;
could be erroneous because JavaScript code that changes element visibility works with delays.
To overcome such problems we can use &lt;code&gt;WebDriverWait&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebDriverWait webDriverWait = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebDriverWait(webDriver, &lt;span class=&quot;integer&quot;&gt;10L&lt;/span&gt;);
WebElement visibleElement = webDriverWait.until(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Function&amp;lt;Webdriver, WebElement&amp;gt;() {
        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; WebElement apply(WebDriver webDriver) {
                WebElement we = webDriver.findElement(...);
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; we.isDisplayed() ? we : &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
        }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code periodically finds element and checks its visibility.
When element exist and visible it will be returned by &lt;code&gt;until(..)&lt;/code&gt; method.
To check if element is invisible at the moment we can use similar approach just negating the condition in the function body&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-2&quot;&gt;Case #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s another option for dealing with show/hide certain parts of the page.
Your code can create required HTML on the fly while showing and remove elements from DOM while hiding.
To check element visibility we can use approach described above. But for checking if the part of the page is not shown to customer
we can&amp;#8217;t use that because there&amp;#8217;s no elements in DOM and if we try to use &lt;code&gt;findElement(&amp;#8230;&amp;#8203;)&lt;/code&gt; we will get the exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Issue could be solved by using &lt;code&gt;WebDriverWait&lt;/code&gt; &lt;code&gt;findElements(&amp;#8230;&amp;#8203;)&lt;/code&gt; method that doesn&amp;#8217;t throw an exception but return empty list if no elements found.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebDriverWait webDriverWait = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebDriverWait(webDriver, &lt;span class=&quot;integer&quot;&gt;10L&lt;/span&gt;);
webDriverWait.until(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Predicate&lt;/span&gt;&amp;lt;WebDriver&amp;gt;() {
        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; apply(WebDriver webDriver) {
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; webDriver.findElements(...).size() == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
        }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code periodically searches for elements matching criteria and return true when no elements found.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-s&quot;&gt;P.S.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It could save your time and make your code cleaner if you put code samples from above as static methods into utility class.
This allows you to easily reuse such functionality while writing WebDriver tests for your pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/11/seleniumwebdriver-tricks-part-3.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/11/seleniumwebdriver-tricks-part-3.html</guid>
        
        <category>java</category>
        
        <category>webdriver</category>
        
        <category>how-to</category>
        
        <category>selenium</category>
        
        
      </item>
    
      <item>
        <title>CodingDojoCnUa #2 results</title>
        <description>&lt;h1&gt;CodingDojoCnUa #2 results&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On 5th of February our small Cherhihiv community made 2nd &lt;em&gt;СodingDojo&lt;/em&gt;.
This time it was dedicated to &lt;code&gt;JavaScript&lt;/code&gt; programming.
We tried to code some &lt;em&gt;Design Patterns&lt;/em&gt; in new language.
What we attained during 2 two 1 our long session is following patterns implemented&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Singleton, yeah yeah yeah :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Factory method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template method v1 (prototype hierarchy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template method v2 (runtime meta-programming)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decorator&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we found very good during retrospection is usage of &lt;em&gt;TimeBox&lt;/em&gt; policy for changing pilot/co-pilot,
we used 7 minutes limited time box and &lt;code&gt;IntelliJ IDEA&lt;/code&gt; &lt;code&gt;Pomodoro&lt;/code&gt; plugin was helpful on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During programming we all suffered of our Java mindset.
Even plain looking into Wikipedia description and attempt to re-implement &lt;code&gt;Java&lt;/code&gt; code samples in &lt;code&gt;JavaScript&lt;/code&gt; were damaging our brains :)
Lack of interfaces (as in &lt;code&gt;Java&lt;/code&gt;) and completely different approach of creating class hierarchy slowed down our development speed.
Another issue was immense scope of our &lt;em&gt;Dojo&lt;/em&gt;. Certain targets (patterns) were chosen only at the beginning of session and it was a challenge
to create domain object for certain patterns without detailed design session for which we have no time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-decided-to-do-next&quot;&gt;What we decided to do next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pick up and implement some Kata to have more certainty on what we wanna achieve&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increase time box to 10 minutes, let&amp;#8217;s see if helps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get some cookies and drinks to not starve during session :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;my-personal-observations&quot;&gt;My personal observations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest part was &lt;code&gt;Jasmine&lt;/code&gt;. This BDD tool was adopted seamlessly by all of us since TDD tools and practices are familiar to us from &lt;code&gt;Java&lt;/code&gt; world
and &lt;code&gt;Jasmine&lt;/code&gt; is very similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The hardest was start thinking again in higher level OOP terms, not in their equivalents in &lt;code&gt;Java&lt;/code&gt;.
All those interfaces, classes limited to the same named file and other limitation imposed by &lt;code&gt;Java&lt;/code&gt; were hard to overcome.
Considering present of duck typing in JavaScript we get rid of interfaces, abstract classes and class hierarchy at all.
Another uncommon point was API concentrated in module not in class as in &lt;code&gt;Java&lt;/code&gt; it it was also a bit frustrating from the beginning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But anyway the coolest thing was our success in short and stressful session as well as knowledge obtained.
I think attitude to &lt;code&gt;JavaScript&lt;/code&gt; should change a bit towards paying more respect for this amazing and underestimated language (my IMO though).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 06 Feb 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/02/06/codingdojocnua-2-results.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/02/06/codingdojocnua-2-results.html</guid>
        
        <category>javascript</category>
        
        <category>coding dojo</category>
        
        <category>design pattern</category>
        
        
      </item>
    
      <item>
        <title>WebDriver tricks - part 2</title>
        <description>&lt;h1&gt;WebDriver tricks - part 2&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have you ever heard about WebDriver&amp;#8217;s feature of capturing screenshots ?
Now you know it can do it too ! Today we faced a problem of debugging WebDriver tests of remote continuous integration server.
Since locally tests passed but failed on TeamCity we had a need to get some more debug info.
After playing around with capturing API i&amp;#8217;ve created utility class that is capturing browser screen and stores image
into folder named as test class with image filename equals to running test method.
For instance, you have class &lt;code&gt;com.MyUnstableWebTest&lt;/code&gt; and method &lt;code&gt;whenSmthHappensThenDoAction&lt;/code&gt;.
When the utility method is called - image file with slightly the same as below name gonna be created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example name: &lt;code&gt;/webtest-screenshot/com.MyUnstableWebTest/whenSmthHappensThenDoAction.png&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s sources of utility in &lt;code&gt;Groovy&lt;/code&gt;. Please note that was tested only with &lt;code&gt;FireFox&lt;/code&gt; web driver&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.webtest

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.io.FileUtils&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.openqa.selenium.OutputType&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.openqa.selenium.TakesScreenshot&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.openqa.selenium.WebDriver&lt;/span&gt;

&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;ScreenshotUtils&lt;/span&gt; {
        &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; storeScreenshot(WebDriver webDriver,
                        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; debugInfo = &lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.currentTimeMillis()) {
                &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; webTest = &lt;span class=&quot;predefined-type&quot;&gt;Thread&lt;/span&gt;.currentThread().stackTrace.find {
            &lt;span class=&quot;local-variable&quot;&gt;it&lt;/span&gt;.className.endsWith(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WebTest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        }
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!webTest) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Called outside of WebTest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

        &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; srcFile = ((TakesScreenshot) webDriver).getScreenshotAs(OutputType.BYTES)
        FileUtils.writeByteArrayToFile(
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;./webtest-screenshot/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;webTest.className&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;webTest.methodName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;debugInfo&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
                        srcFile
                )
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/01/13/seleniumwebdriver-tricks-part-2.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/01/13/seleniumwebdriver-tricks-part-2.html</guid>
        
        <category>java</category>
        
        <category>firefox</category>
        
        <category>debug</category>
        
        <category>webdriver</category>
        
        <category>selenium</category>
        
        <category>screenshot</category>
        
        
      </item>
    
      <item>
        <title>WebDriver tricks - part 1</title>
        <description>&lt;h1&gt;WebDriver tricks - part 1&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally decided to start series (i hope) of blog posts describing tricks that could help developers
to write more robust Selenium / WebDriver tests. Here are two of them.
This information is all covered by Selenium JavaDocs. But if you&amp;#8217;re good programmer - will you ever read JavaDocs ? :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;trick&quot;&gt;Trick&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: How to find element by XPath expression under certain node of HTML tree and not from HTML tree root ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: You should prefix your XPath expression with &lt;code&gt;.//&lt;/code&gt; (dot in the beginning)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having HTML&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;panel1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;ITEM1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;ITEM2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java test below illustrates the difference&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebElement panel2 = webDriver.findElement(By.id(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));

WebElement el1 = panel2.findElement(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;//span[@class = &#39;myClass&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
WebElement el2 = panel2.findElement(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.//span[@class = &#39;myClass&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));

&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; el1.getText().equals(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ITEM1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; el2.getText().equals(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ITEM2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;XPath expression &lt;code&gt;//span[@class = &#39;myClass&#39;]&lt;/code&gt; makes WebDriver to look for element using HTML root as starting point
even if we call &lt;code&gt;findElement()&lt;/code&gt; not at &lt;code&gt;webDriver&lt;/code&gt; variable.
From other hand using XPath starting from dot, i.e. &lt;code&gt;.//span[@class = &#39;myClass&#39;]&lt;/code&gt;
instructs WebDriver to use &lt;strong&gt;panel2&lt;/strong&gt; as starting point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;trick-2&quot;&gt;Trick&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: How to check that certain element doesn&amp;#8217;t exist in HTML tree.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A: There&amp;#8217;s common &lt;strong&gt;anti-pattern&lt;/strong&gt; frequently used by developers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebElement notExist = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
    notExist = webDriver.findElement(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;//div[@id=&#39;iAmNotHere&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
} &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;NoSuchElementException&lt;/span&gt; e) {
}
&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; notExist == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach has enough disadvantages and best practices violations. We ain&amp;#8217;t gonna cover them here ;)
Instead we can use much simpler code to achieve the same result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; webDriver.findElements(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;//div[@id=&#39;iAmNotHere&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)).size() == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-s-let-s-start-read-javadocs-before-writing-code&quot;&gt;P.S.: Let&amp;#8217;s start read JavaDocs before writing code :)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 23 Dec 2011 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2011/12/23/selenium-webdriver-tricks-1.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2011/12/23/selenium-webdriver-tricks-1.html</guid>
        
        <category>java</category>
        
        <category>webdriver</category>
        
        <category>xpath</category>
        
        <category>how-to</category>
        
        <category>selenium</category>
        
        
      </item>
    
      <item>
        <title>Three steps to follow MVC while building Java Web application</title>
        <description>&lt;h1&gt;Three steps to follow MVC while building Java Web application&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-1&quot;&gt;Step #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;do&quot;&gt;DO&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Always process URL (POST forms, link clicking etc) by servlet / action bean and never by JSP&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why&quot;&gt;WHY&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ActionBeans&lt;/code&gt; (whatever certain framework call those classes) and rarely servlets are &lt;code&gt;controllers&lt;/code&gt; intended for processing user input.
JSPs are &lt;code&gt;view&lt;/code&gt; engine dedicated to rendering representation of software to client.
Separating user input processing and HTML rendering prevents you from temptation of creating huge,
multi-purpose, untestable JSPs that are mixing business and representation logic and violating MVC pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-2&quot;&gt;Step #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;do-2&quot;&gt;DO&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Render views by forwarding to JSP located only under &lt;code&gt;/WEB-INF/${JSP folder}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why-2&quot;&gt;WHY&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Views should be accessible only by design of software and never directly.
Putting JSPs within root directory of project brings security issues regarding unwanted access to them from clients.
Also practice of hiding all JSPs under &lt;code&gt;/WEB-INF&lt;/code&gt; reduces possibility of URL being processed by JSP and not controller and help us to follow &lt;strong&gt;step #1&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3&quot;&gt;Step #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;do-3&quot;&gt;DO&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pass model from controller to view only by using request attributes or flash scope&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why-3&quot;&gt;WHY&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All other ways of view being able to access some data are too limited or insecure.
Using request parameters directly within view can be the option for malicious user to pass invalid data.
Using session for storing information is causing memory consumption and requires mechanisms to clear unused data after expiration.
Cookies depends on browser, limited in size and not very friendly to use.
From the other hand - request attributes lacks all those drawback and propose clean
decoupling of controller responsibility (update model) and view responsibility (read model).
Flash scope becomes very handy when it comes to &lt;code&gt;Redirect After Post&lt;/code&gt; pattern where request attributes can&amp;#8217;t be used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ps&quot;&gt;PS:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All modern &lt;em&gt;action-based&lt;/em&gt; frameworks are using steps described below to achieve their goals.
But if you using some old fashioned code or don&amp;#8217;t use any framework at all - you still can achieve good clean and easy to use MVC.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 12 Dec 2011 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2011/12/12/three-steps-to-follow-mvc-while.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2011/12/12/three-steps-to-follow-mvc-while.html</guid>
        
        <category>java</category>
        
        <category>mvc</category>
        
        <category>web</category>
        
        
      </item>
    
  </channel>
</rss>
