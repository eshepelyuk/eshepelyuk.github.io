<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JK&#39;s blog</title>
    <description>Simple blog for some thoughts to be shared. Mostly about Java programming.
</description>
    <link>http://eshepelyuk.github.io/</link>
    <atom:link href="http://eshepelyuk.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 Oct 2014 07:03:08 +0000</pubDate>
    <lastBuildDate>Fri, 24 Oct 2014 07:03:08 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Test Me If You Can (#1)</title>
        <description>&lt;h1&gt;Test Me If You Can (#1)&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-purpose-of-this-post-series&quot;&gt;The purpose of this post series&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During my career I often observed people who claim that they are not writing tests because &quot;can&amp;#8217;t cover&quot; integration between components.
Well, I believe most of such people just don&amp;#8217;t know some simply techniques or don&amp;#8217;t have time to dig them out because of stress at their work place.
The lack of such knowledge results into neglecting of integration tests and thus worse software, more bugs and disappointed customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I&amp;#8217;ve decided to share some practices collected during last couple of years that are revealing mystery surrounding integration testing.
The series will be concentrated around Spring framework, that I&amp;#8217;m most familiar with. Let&amp;#8217;s start :)&amp;lt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;better-integration-test-for-spring-based-projects&quot;&gt;Better integration test for Spring based projects&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tools: &lt;code&gt;Spring&lt;/code&gt;, &lt;code&gt;JUnit&lt;/code&gt;, &lt;code&gt;Mockito&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine the situation with &lt;code&gt;Spring&lt;/code&gt; based project that&amp;#8217;s integrating an external service, e.g. some bank web services.
Issues related to writing test cases and running them within CI for such code are usually the same&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;price per transaction, each time test executed - customer pays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tests requests can be interpreted as suspicious traffic, account blocked - tests failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when using non production environments for tests, it can be unstable - again, tests failures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually such problems can be solved by mocking such external service while testing single class that using it,
but when it comes to the need for test larger business flow - you need to run your tests again many components
and made them managed by your container - &lt;code&gt;Spring&lt;/code&gt;.
Luckily &lt;code&gt;Spring&lt;/code&gt; has great &lt;a href=&quot;http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/testing.html&quot; target=&quot;_blank&quot;&gt;test framework&lt;/a&gt;
allowing injection of beans from production configuration, but one needs to mock external services himself.
First intention could be creating mocks in &lt;code&gt;setUp&lt;/code&gt; section of the test and re-inject beans previously injected by &lt;code&gt;Spring&lt;/code&gt;, but think more about it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You&amp;#8217;re overriding behavior of container for your test, so there&amp;#8217;s no guarantee it will work the same way for real services on real environment.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead we have not to mock our external services and then re-inject them into corresponding beans, but &lt;strong&gt;make &lt;code&gt;Spring&lt;/code&gt; inject mocks in place of particular beans
, required for our test goals&lt;/strong&gt;. Let&amp;#8217;s illustrate this with code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My sample project comprises &lt;code&gt;BankService&lt;/code&gt; representing external service and &lt;code&gt;UserBalanceService&lt;/code&gt; - our service working with &lt;code&gt;BankService&lt;/code&gt;.
&lt;code&gt;UserBalanceService&lt;/code&gt; is quite simple wrapper - just making conversion from &lt;code&gt;String&lt;/code&gt; to `Double&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;BankService.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;BankService&lt;/span&gt; {
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getBalanceByEmail(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; email);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;BankServiceImpl.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;BankServiceImpl&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; BankService {
    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getBalanceByEmail(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; email) {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;UnsupportedOperationException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Operation failed due to external exception&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;UserBalanceService.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;type&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;UserBalanceService&lt;/span&gt; {
    &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt; getAccountBalance(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; email);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;UserBalanceServiceImpl.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;UserBalanceServiceImpl&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; UserBalanceService {
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; BankService bankService;
    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt; getAccountBalance(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; email) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt;.valueOf(bankService.getBalanceByEmail(email));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the &lt;code&gt;Spring&lt;/code&gt; dependency XML configuration wiring everything together&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;applicationContext.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.springframework.org/schema/beans&lt;/span&gt;
       &lt;span class=&quot;content&quot;&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bankService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ua.eshepelyuk.blog.springtest.springockito.BankServiceImpl&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userBalanceService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ua.eshepelyuk.blog.springtest.springockito.UserBalanceServiceImpl&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our test will look like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;UserBalanceServiceImplTest.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.class)
&lt;span class=&quot;annotation&quot;&gt;@ContextConfiguration&lt;/span&gt;(locations = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;classpath:/springtest/springockito/applicationContext.xml&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;UserBalanceServiceImplProfileTest&lt;/span&gt; {
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; UserBalanceService userBalanceService;
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; BankService bankService;
    &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; shouldReturnMockedBalance() {
        &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt; balance = userBalanceService.getAccountBalance(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user@bank.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        assertEquals(balance, &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt;.valueOf(&lt;span class=&quot;float&quot;&gt;123.45D&lt;/span&gt;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As expected after test run we will have &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. Our intention is to replace &lt;code&gt;BankService&lt;/code&gt; with mock and tune its behavior.
It&amp;#8217;s possible to use &lt;code&gt;Mockito&lt;/code&gt; directly as factory bean
but there&amp;#8217;s better alternative - &lt;a href=&quot;https://bitbucket.org/kubek2k/springockito/wiki/Home&quot; target=&quot;_blank&quot;&gt;Springockito framework&lt;/a&gt;.
Please take a look before proceed :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The remaining question is how to instruct &lt;code&gt;Spring&lt;/code&gt; to inject mocks instead of real beans,
Prior to version 3.1 there were no alternatives except creating brand new XML configuration for using it in test.
But with introduction of &lt;a href=&quot;http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released&quot; target=&quot;_blank&quot;&gt;Bean Definition Profiles&lt;/a&gt;
we now able to create more elegant solution for this, although we still need separate XML for test purposes.
This is how resulting test XML configuration will look like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;testApplicationContext.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;attribute-name&quot;&gt;xmlns:mockito&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.mockito.org/spring/mockito&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;
       &lt;span class=&quot;content&quot;&gt;http://www.mockito.org/spring/mockito https://bitbucket.org/kubek2k/springockito/raw/tip/springockito/src/main/resources/spring/mockito.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;import&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;classpath:/springtest/springockito/applicationContext.xml&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;profile&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;springTest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;mockito:mock&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bankService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ua.eshepelyuk.blog.springtest.springockito.BankService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the test modified accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;UserBalanceServiceImplTest.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.class)
&lt;span class=&quot;annotation&quot;&gt;@ContextConfiguration&lt;/span&gt;(locations = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;classpath:/springtest/springockito/testApplicationContext.xml&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@ActiveProfiles&lt;/span&gt;(profiles = {&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;springTest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;UserBalanceServiceImplProfileTest&lt;/span&gt; {
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; UserBalanceService userBalanceService;
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; BankService bankService;
    &lt;span class=&quot;annotation&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; setUp() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
        Mockito.when(bankService.getBalanceByEmail(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user@bank.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)).thenReturn(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;.valueOf(&lt;span class=&quot;float&quot;&gt;123.45D&lt;/span&gt;));
    }
    &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; shouldReturnMockedBalance() {
        &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt; balance = userBalanceService.getAccountBalance(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user@bank.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        assertEquals(balance, &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt;.valueOf(&lt;span class=&quot;float&quot;&gt;123.45D&lt;/span&gt;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may notice appearance of &lt;code&gt;setUp&lt;/code&gt; method for setting up the mock behavior and new &lt;code&gt;@Profile&lt;/code&gt; annotation.
The annotation activates our profile &lt;code&gt;springTest&lt;/code&gt; so bean mocked with &lt;code&gt;Springockito&lt;/code&gt; will be injected where necessary.
On running this the test will pass, because &lt;code&gt;Spring&lt;/code&gt; injected &lt;code&gt;Mockito&lt;/code&gt; mock that we&amp;#8217;ve configured in test XML and not the external service instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;don-t-stop-on-the-way-to-perfectness&quot;&gt;Don&amp;#8217;t stop on the way to perfectness&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It could be the end of the story be we could still go deeper on the problem.
&lt;code&gt;Springockito&lt;/code&gt; creator has another framework &lt;a href=&quot;https://bitbucket.org/kubek2k/springockito/wiki/springockito-annotations&quot; target=&quot;_blank&quot;&gt;Springockito Annotations&lt;/a&gt;.
The framework allows mock injection using annotation within test classes.
Please skim read it before proceed :)
After some modification code of our test will look this way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.class)
&lt;span class=&quot;annotation&quot;&gt;@ContextConfiguration&lt;/span&gt;(loader = SpringockitoContextLoader.class,
    locations = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;classpath:/springtest/springockito/applicationContext.xml&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;UserBalanceServiceImplAnnotationTest&lt;/span&gt; {
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; UserBalanceService userBalanceService;
    &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;annotation&quot;&gt;@ReplaceWithMock&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; BankService bankService;
    &lt;span class=&quot;annotation&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; setUp() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
        Mockito.when(bankService.getBalanceByEmail(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user@bank.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)).thenReturn(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;.valueOf(valueOf(&lt;span class=&quot;float&quot;&gt;123.45D&lt;/span&gt;)));
    }
    &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; shouldReturnMockedBalance() {
        &lt;span class=&quot;predefined-type&quot;&gt;Double&lt;/span&gt; balance = userBalanceService.getAccountBalance(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user@bank.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        assertEquals(balance, valueOf(&lt;span class=&quot;float&quot;&gt;123.45D&lt;/span&gt;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that no new XML configuration required. We&amp;#8217;re using production XML config and just override single bean using &lt;code&gt;@ReplaceWithMock&lt;/code&gt; annotation.
Later we can customize the mock in &lt;code&gt;setUp&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-s&quot;&gt;P.S.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Springockito-annotations&lt;/code&gt; project has one great advantage - it provides test code only based dependency override mechanism.
Neither additional XML, nor production code modifications for test purposes.
Unlike &lt;code&gt;springockito-annotations&lt;/code&gt; approach the XML based one makes creation of test specific XML mandatory always.
So I strongly recommend using &lt;code&gt;Springockito-annotations&lt;/code&gt; project for your integration tests,
so they won&amp;#8217;t affect your production code design and won&amp;#8217;t produce additional artifacts - i.e. test XML configuration files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-p-s&quot;&gt;P.P.S.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing integration tests for Spring is easy ! Project can be found on &lt;a href=&quot;https://github.com/eshepelyuk/CodeForBlog/tree/master/TestMeIfYouCan1&quot; target=&quot;_blank&quot;&gt;My GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2013/06/28/test-me-if-you-can-1.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2013/06/28/test-me-if-you-can-1.html</guid>
        
        <category>java</category>
        
        <category>tdd</category>
        
        <category>spring</category>
        
        <category>mockito</category>
        
        
      </item>
    
      <item>
        <title>Duck typing in Java ? Well, not exactly</title>
        <description>&lt;h1&gt;Duck typing in Java ? Well, not exactly&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is it all about ? According to Wikipedia duck typing is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;style of dynamic typing in which an object&amp;#8217;s methods and properties determine the valid semantics,
rather than its inheritance from a particular class or implementation of a specific interface&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Wikipedia
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In simpler words&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In languages with dynamic typing this feature allows creating function that are not checking type of passed object
but instead rely on existence of particular methods/properties within it and throws runtime exception when those properties not found.
For instance, in &lt;code&gt;Groovy&lt;/code&gt; we could have a function for printing out info about an entity&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; printEntity = {entity -&amp;gt;
  println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;entity.id&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;entity.name&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say we have following class&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Entity&lt;/span&gt; {
  &lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; id
  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we can invoke our function&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;printEntity(new Entity(id: 10L, name: &#39;MyName1&#39;))
id: 10, name: MyName1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the same time we could pass map as argument&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;printEntity([&#39;id&#39;:10L, &#39;name&#39;:&#39;MyName2&#39;])
id: 10, name: MyName2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using metaprogramming magic we could write even following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ghost&lt;/span&gt; {
 &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;propertyMissing&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;StubName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
 }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And we will be still able to call our function&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;printEntity(new Ghost())
id: -1, name: StubName&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;welcome-to-the-real-world&quot;&gt;Welcome to the real world&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately this concept can be used not only for languages with dynamic typing but for ones with more strict typing model, as &lt;code&gt;Java&lt;/code&gt;.
Wikipedia has good &lt;a href=&quot;http://en.wikipedia.org/wiki/Duck_typing#In_Java&quot; target=&quot;_blank&quot;&gt;example&lt;/a&gt; of duck typing implementation in &lt;code&gt;Java&lt;/code&gt;
using &lt;code&gt;Proxy&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, you&amp;#8217;d say, what is the practical usage of this, except feeling oneself the wisest guru :)
Let me show some real life task that was solved in Java using &lt;em&gt;Duck Typing&lt;/em&gt; technique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the beginning we had simple report generator that queries DB of products and outputs id and name of certain entity.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;id&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Phone #1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;222&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Book #2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But then customer says:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d like to also have link to the entity detail page at our site.
Beautiful, SEO friendly link. Could you do it to me ?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Sure &quot;, I said. After digging our codebase I&amp;#8217;ve discovered cool function &lt;code&gt;generateSeoUrl()&lt;/code&gt; that does the job.
The function takes one argument of type &lt;code&gt;Entity&lt;/code&gt;, which is interface.
So my intention was to observe implementations of &lt;code&gt;Entity&lt;/code&gt; and try to use one of them for SEO URL creation in the report generator.
How surprised was I after discovering that all of them are part of some self made &lt;em&gt;ORM&lt;/em&gt; tool
and their constructors query DB to get the entire information about product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So if I were using &lt;code&gt;Entity&lt;/code&gt; implementations I had to deal with one extra query per row of my report and this is unacceptable
since report was comprised of huge number of rows. So I decided to try other approach and implement &lt;code&gt;Entity&lt;/code&gt; interface,
overriding methods that are used by &lt;code&gt;generateSeoUrl()&lt;/code&gt;.
I clicked my IDE shortcut and got surprised again. &lt;code&gt;Entity&lt;/code&gt; had &lt;strong&gt;50 (!!!)&lt;/strong&gt; methods.
Well, I already knew that only &lt;code&gt;getEntityId()&lt;/code&gt; and &lt;code&gt;getName()&lt;/code&gt; are used by &lt;code&gt;generateSeoUrl()&lt;/code&gt; function,
but then again, having new class with 50 empty methods just to override 2 of them doing useful action seemed not good idea for me.
Thus I&amp;#8217;ve decided stop trying coding and start to think :)
Extend some of the &lt;code&gt;Entity&lt;/code&gt; implementation to prevent querying DB or copy + paste &lt;code&gt;generateSeoUrl()&lt;/code&gt; and adopt it for my needs
were the options but still it was not beautiful. Especially when I reminded duck typing.
I said to myself, we have a function that takes instance of &lt;code&gt;Entity&lt;/code&gt; but only uses two method of this interface,
so to complete my task I need something that looks like &lt;code&gt;Entity&lt;/code&gt; and able to handle &lt;code&gt;getEntityId&lt;/code&gt; and &lt;code&gt;getName()&lt;/code&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since &lt;code&gt;entityId&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;  were already present in data used for generating my report I could reuse them in my new class to stub data for &lt;code&gt;getEntityId()&lt;/code&gt; and &lt;code&gt;getName()&lt;/code&gt;.
To achieve duck typing we need to create &lt;code&gt;Proxy&lt;/code&gt; that also implements &lt;code&gt;InvocationHandler&lt;/code&gt; interface
and static method to retrieve instance of &lt;code&gt;Proxy&lt;/code&gt;. Final code of my class looks like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;ReportEntitySupport&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;InvocationHandler&lt;/span&gt; {
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Entity&lt;/span&gt; newInstance(&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; entityId, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Entity&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;Proxy&lt;/span&gt;.newProxyInstance(
                Product.class.getClassLoader(),
                Product.class.getInterfaces(),
                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReportEntitySupport(entityId, name)
        );
    }

    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name;
    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; entityId;

    &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; ReportEntitySupport(&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; entityId, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name) {
        &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.name = name;
        &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.entityId = entityId;
    }

    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; invoke(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; proxy, &lt;span class=&quot;predefined-type&quot;&gt;Method&lt;/span&gt; method, &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Throwable&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (method.getName().equals(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.name;
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (method.getName().equals(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;getEntityId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.entityId;
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how to use it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inside my report generator while iterating over &lt;code&gt;ResultSet&lt;/code&gt; I&amp;#8217;m using following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; entityId = ...;        &lt;span class=&quot;comment&quot;&gt;//retrieve entityId from ResultSet&lt;/span&gt;
&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name = ...;                 &lt;span class=&quot;comment&quot;&gt;//retrieve name from ResultSet&lt;/span&gt;

&lt;span class=&quot;predefined-type&quot;&gt;Entity&lt;/span&gt; entity = ReportEntitySupport.newIntance(entityId, name);
&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; seoUrl = generateSeoUrl(entity);
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-s&quot;&gt;P.S.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post just illustrates that some uncommon for Java language concepts could be successfully applied
for completing real life tasks improving your programming skills and making your code more beautiful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/09/15/duck-typing-in-java-well-not-exactly.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/09/15/duck-typing-in-java-well-not-exactly.html</guid>
        
        <category>java</category>
        
        <category>groovy</category>
        
        <category>duck typing</category>
        
        
      </item>
    
      <item>
        <title>CodingDojoCnUa #6</title>
        <description>&lt;h1&gt;CodingDojoCnUa #6&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, 28th of July, our CodingDojoCnUa community successfully conducted 6th Coding Dojo.
We met at Chernihiv&amp;#8217;s office of SysIQ, as few times before.
The subject of our session was &lt;code&gt;RomanNumerals&lt;/code&gt; kata - description can be found by &lt;a href=&quot;http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals&quot;&gt;HERE&lt;/a&gt;.
Main thing distinguishing this Dojo from previous ones was splitting the attendees into two separate teams
that were working on their own without shared &lt;em&gt;Design Session&lt;/em&gt;.
Each team was responsible for figuring out own implementation and eventually produced working code together with unit tests.
Both implementation can be found at GitHub&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eshepelyuk/CodingDojoCnUa/tree/master/Dojo6/teamA&quot; target=&quot;_blank&quot;&gt;Code for TeamA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eshepelyuk/CodingDojoCnUa/tree/master/Dojo6/teamB&quot; target=&quot;_blank&quot;&gt;Code for TeamB&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-ve-discovered&quot;&gt;What we&amp;#8217;ve discovered&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First things to mention that team provided completely different solutions to the same problem.
Relative simplicity of Kata seemed to help coders to split task into smaller parts thus supporting true incremental development,
concentrating on providing small slices of functionality after creating failed test.
Unlike previous times there were no attempts to create &lt;code&gt;God Functions&lt;/code&gt; immediately after start of Dojo.
Although longer Design Sessions are essential to make team move faster and effectively with incremental development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second main observation is that few peoples who don&amp;#8217;t use TDD on daily basis realized that this approach
could significantly affect original design of algorithm and even imposes final design.
On retrospective meeting one of us described this impression&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
People saw TDD in action.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3rd and the shortest - &lt;code&gt;CoffeeScript&lt;/code&gt; tastes better each time you try it :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-re-gonna-try-next-time&quot;&gt;What we&amp;#8217;re gonna try next time ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apparently largest negative issue raised on retro was isolation of members within own team and lack of inter-team communication.
Attendees suggested various options, even tackle more complicated task than kata,
like some sort of network game, and go through complete process of application development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But finally we agreed on just to exchange team members in the middle of next Dojo
to see if this is helpful for coding and / or brings more fun to the event :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some photos &lt;a href=&quot;http://www.facebook.com/media/set/?set=oa.378960365504429&amp;amp;type=1&quot; target=&quot;_blank&quot;&gt;@Facebook&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/28/codingdojocnua-6.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/28/codingdojocnua-6.html</guid>
        
        <category>roman numerals</category>
        
        <category>coffeescript</category>
        
        <category>coding dojo</category>
        
        <category>kata</category>
        
        
      </item>
    
      <item>
        <title>WebDriver tricks - part 3</title>
        <description>&lt;h1&gt;WebDriver tricks - part 3&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s common case for dynamic pages to show / hide some elements basing on user&amp;#8217;s actions.
But covering them with stable WebDriver tests could be sometimes cumbersome.
I&amp;#8217;ll try to explain couple of techniques helping to deal with that sort of web pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-1&quot;&gt;Case #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First approach I&amp;#8217;d like to describe is rendering all the elements on page load but set CSS &lt;code&gt;display&lt;/code&gt; property to &lt;code&gt;none&lt;/code&gt;
and later set it to empty or &lt;code&gt;block&lt;/code&gt; to make element visible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case we can&amp;#8217;t just check visibility by using &lt;code&gt;webDriver.findElement(&amp;#8230;&amp;#8203;)&lt;/code&gt; since it will return valid element but we don&amp;#8217;t know if it visible or not.
Fortunately &lt;code&gt;WebElement&lt;/code&gt; interface has method &lt;code&gt;isDisplayed()&lt;/code&gt;, however obvious solution &lt;code&gt;webDriver.findElement(&amp;#8230;&amp;#8203;).isDisplayed()&lt;/code&gt;
could be erroneous because JavaScript code that changes element visibility works with delays.
To overcome such problems we can use &lt;code&gt;WebDriverWait&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebDriverWait webDriverWait = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebDriverWait(webDriver, &lt;span class=&quot;integer&quot;&gt;10L&lt;/span&gt;);
WebElement visibleElement = webDriverWait.until(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Function&amp;lt;Webdriver, WebElement&amp;gt;() {
        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; WebElement apply(WebDriver webDriver) {
                WebElement we = webDriver.findElement(...);
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; we.isDisplayed() ? we : &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
        }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code periodically finds element and checks its visibility.
When element exist and visible it will be returned by &lt;code&gt;until(..)&lt;/code&gt; method.
To check if element is invisible at the moment we can use similar approach just negating the condition in the function body&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-2&quot;&gt;Case #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s another option for dealing with show/hide certain parts of the page.
Your code can create required HTML on the fly while showing and remove elements from DOM while hiding.
To check element visibility we can use approach described above. But for checking if the part of the page is not shown to customer
we can&amp;#8217;t use that because there&amp;#8217;s no elements in DOM and if we try to use &lt;code&gt;findElement(&amp;#8230;&amp;#8203;)&lt;/code&gt; we will get the exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Issue could be solved by using &lt;code&gt;WebDriverWait&lt;/code&gt; &lt;code&gt;findElements(&amp;#8230;&amp;#8203;)&lt;/code&gt; method that doesn&amp;#8217;t throw an exception but return empty list if no elements found.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebDriverWait webDriverWait = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebDriverWait(webDriver, &lt;span class=&quot;integer&quot;&gt;10L&lt;/span&gt;);
webDriverWait.until(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Predicate&lt;/span&gt;&amp;lt;WebDriver&amp;gt;() {
        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; apply(WebDriver webDriver) {
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; webDriver.findElements(...).size() == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
        }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code periodically searches for elements matching criteria and return true when no elements found.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-s&quot;&gt;P.S.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It could save your time and make your code cleaner if you put code samples from above as static methods into utility class.
This allows you to easily reuse such functionality while writing WebDriver tests for your pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/11/seleniumwebdriver-tricks-part-3.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/11/seleniumwebdriver-tricks-part-3.html</guid>
        
        <category>java</category>
        
        <category>webdriver</category>
        
        <category>how-to</category>
        
        <category>selenium</category>
        
        
      </item>
    
      <item>
        <title>CodingDojoCnUa #2 results</title>
        <description>&lt;h1&gt;CodingDojoCnUa #2 results&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On 5th of February our small Cherhihiv community made 2nd &lt;em&gt;СodingDojo&lt;/em&gt;.
This time it was dedicated to &lt;code&gt;JavaScript&lt;/code&gt; programming.
We tried to code some &lt;em&gt;Design Patterns&lt;/em&gt; in new language.
What we attained during 2 two 1 our long session is following patterns implemented&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Singleton, yeah yeah yeah :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Factory method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template method v1 (prototype hierarchy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template method v2 (runtime meta-programming)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decorator&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we found very good during retrospection is usage of &lt;em&gt;TimeBox&lt;/em&gt; policy for changing pilot/co-pilot,
we used 7 minutes limited time box and &lt;code&gt;IntelliJ IDEA&lt;/code&gt; &lt;code&gt;Pomodoro&lt;/code&gt; plugin was helpful on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During programming we all suffered of our Java mindset.
Even plain looking into Wikipedia description and attempt to re-implement &lt;code&gt;Java&lt;/code&gt; code samples in &lt;code&gt;JavaScript&lt;/code&gt; were damaging our brains :)
Lack of interfaces (as in &lt;code&gt;Java&lt;/code&gt;) and completely different approach of creating class hierarchy slowed down our development speed.
Another issue was immense scope of our &lt;em&gt;Dojo&lt;/em&gt;. Certain targets (patterns) were chosen only at the beginning of session and it was a challenge
to create domain object for certain patterns without detailed design session for which we have no time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-decided-to-do-next&quot;&gt;What we decided to do next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pick up and implement some Kata to have more certainty on what we wanna achieve&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increase time box to 10 minutes, let&amp;#8217;s see if helps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get some cookies and drinks to not starve during session :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;my-personal-observations&quot;&gt;My personal observations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest part was &lt;code&gt;Jasmine&lt;/code&gt;. This BDD tool was adopted seamlessly by all of us since TDD tools and practices are familiar to us from &lt;code&gt;Java&lt;/code&gt; world
and &lt;code&gt;Jasmine&lt;/code&gt; is very similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The hardest was start thinking again in higher level OOP terms, not in their equivalents in &lt;code&gt;Java&lt;/code&gt;.
All those interfaces, classes limited to the same named file and other limitation imposed by &lt;code&gt;Java&lt;/code&gt; were hard to overcome.
Considering present of duck typing in JavaScript we get rid of interfaces, abstract classes and class hierarchy at all.
Another uncommon point was API concentrated in module not in class as in &lt;code&gt;Java&lt;/code&gt; it it was also a bit frustrating from the beginning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But anyway the coolest thing was our success in short and stressful session as well as knowledge obtained.
I think attitude to &lt;code&gt;JavaScript&lt;/code&gt; should change a bit towards paying more respect for this amazing and underestimated language (my IMO though).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 06 Feb 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/02/06/codingdojocnua-2-results.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/02/06/codingdojocnua-2-results.html</guid>
        
        <category>javascript</category>
        
        <category>coding dojo</category>
        
        <category>design pattern</category>
        
        
      </item>
    
      <item>
        <title>CodingDojoCnUa #2 agenda and tools</title>
        <description>&lt;h1&gt;CodingDojoCnUa #2 agenda and tools&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On 5th of February we are going to have 2nd &lt;em&gt;CodingDojo&lt;/em&gt; meeting dedicated to improve our &lt;code&gt;JavaScript&lt;/code&gt; skills.
The purpose of our gathering will be implementation of design patterns using &lt;code&gt;JavaScript&lt;/code&gt; language.
The good list of patterns could be found &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_design_pattern&quot; target=&quot;_blank&quot;&gt;Wikipedia page&lt;/a&gt;.
Please read the list before meeting :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Links below are also good starting point for exploring &lt;code&gt;JavaScript&lt;/code&gt;.
At least skim reading of links below is required before Dojo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://bonsaiden.github.com/JavaScript-Garden&quot; target=&quot;_blank&quot;&gt;JavaScript Garden - General Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.addyosmani.com/resources/essentialjsdesignpatterns/book&quot; target=&quot;_blank&quot;&gt;Some Design Patterns already implemented&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;agenda&quot;&gt;Agenda&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to pair-program using TDD while implementing few of &lt;em&gt;Software Design Patterns&lt;/em&gt;.
At our previous retro we&amp;#8217;ve chosen to use timeboxing for changing pilot/co-pilot.
Let&amp;#8217;s consider our participants gonna change every 5-7 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 75%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Time&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Start and intro. Decide what exactly we gonna do, so-called &lt;em&gt;Design Session&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10:50&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1st coding session start&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11:50&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Break and &lt;em&gt;how it&amp;#8217;s going&lt;/em&gt; discussion, maybe lunch ?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:20&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2nd &lt;em&gt;Design Session&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2nd coding session begin&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Retro&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14:00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;End&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exact agenda timings are subject to change depending on our progress during Dojo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tools-we-gonna-use&quot;&gt;Tools we gonna use&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will be using &lt;code&gt;NodeJS&lt;/code&gt; as our &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;Jasmine&lt;/code&gt; as &lt;em&gt;TDD/BDD&lt;/em&gt; framework and &lt;code&gt;IntelliJ IDEA&lt;/code&gt;.
Although &lt;code&gt;NodeJS&lt;/code&gt; is rich featured server-side framework we are intended to use it only as JS interpreter.
More docs could be found at &lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot;&gt;NodeJS&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Jasmine&lt;/code&gt; &lt;em&gt;BDD&lt;/em&gt; framework for testing in &lt;code&gt;JavaScript&lt;/code&gt;. It has support for test suites, human friendly assertions,
basic mocking support so its good choice for beginners like us :). Find more on their &lt;a href=&quot;https://github.com/pivotal/jasmine/wiki&quot; target=&quot;_blank&quot;&gt;Docs page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 28 Jan 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/01/28/codingdojocnua-2-agenda-and-tools.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/01/28/codingdojocnua-2-agenda-and-tools.html</guid>
        
        
      </item>
    
      <item>
        <title>WebDriver tricks - part 2</title>
        <description>&lt;h1&gt;WebDriver tricks - part 2&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have you ever heard about WebDriver&amp;#8217;s feature of capturing screenshots ?
Now you know it can do it too ! Today we faced a problem of debugging WebDriver tests of remote continuous integration server.
Since locally tests passed but failed on TeamCity we had a need to get some more debug info.
After playing around with capturing API i&amp;#8217;ve created utility class that is capturing browser screen and stores image
into folder named as test class with image filename equals to running test method.
For instance, you have class &lt;code&gt;com.MyUnstableWebTest&lt;/code&gt; and method &lt;code&gt;whenSmthHappensThenDoAction&lt;/code&gt;.
When the utility method is called - image file with slightly the same as below name gonna be created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example name: &lt;code&gt;/webtest-screenshot/com.MyUnstableWebTest/whenSmthHappensThenDoAction.png&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s sources of utility in &lt;code&gt;Groovy&lt;/code&gt;. Please note that was tested only with &lt;code&gt;FireFox&lt;/code&gt; web driver&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.webtest

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.io.FileUtils&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.openqa.selenium.OutputType&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.openqa.selenium.TakesScreenshot&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.openqa.selenium.WebDriver&lt;/span&gt;

&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;ScreenshotUtils&lt;/span&gt; {
        &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; storeScreenshot(WebDriver webDriver,
                        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; debugInfo = &lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.currentTimeMillis()) {
                &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; webTest = &lt;span class=&quot;predefined-type&quot;&gt;Thread&lt;/span&gt;.currentThread().stackTrace.find {
            &lt;span class=&quot;local-variable&quot;&gt;it&lt;/span&gt;.className.endsWith(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WebTest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        }
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!webTest) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalStateException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Called outside of WebTest&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

        &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; srcFile = ((TakesScreenshot) webDriver).getScreenshotAs(OutputType.BYTES)
        FileUtils.writeByteArrayToFile(
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;./webtest-screenshot/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;webTest.className&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;webTest.methodName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;debugInfo&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
                        srcFile
                )
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/01/13/seleniumwebdriver-tricks-part-2.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/01/13/seleniumwebdriver-tricks-part-2.html</guid>
        
        <category>java</category>
        
        <category>firefox</category>
        
        <category>debug</category>
        
        <category>webdriver</category>
        
        <category>selenium</category>
        
        <category>screenshot</category>
        
        
      </item>
    
      <item>
        <title>WebDriver workshop at Softengi, Chernihiv</title>
        <description>&lt;h1&gt;WebDriver workshop at Softengi, Chernihiv&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we&amp;#8217;ve been doing small workshop dedicated to learning basics of writing functional test using &lt;code&gt;WebDriver&lt;/code&gt;
with couple of guys from Chernihiv&amp;#8217;s Softengi office. The agenda was quite brief&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Doing some sort of &lt;em&gt;Prepared Kata&lt;/em&gt;. It was Google search page example with entering query and clicking suggestions provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactoring of code created&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Break and retrospection of what had been achieved&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More coding to complete the task (checking search results returned by Google)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quick review of successes :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons learnt&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hell yeah, I know &lt;code&gt;Hamcrest&lt;/code&gt; matchers :) and able to use complex combinations of them for assertion, but &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Hamcrest&lt;/code&gt; matchers are too verbose for complex collection operation, so &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;d recommend to write &lt;code&gt;WebDriver&lt;/code&gt; tests using &lt;code&gt;Groovy&lt;/code&gt;, because it allows better collection processing and other syntax sugar as well&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS principle&lt;/a&gt; must be 1st think when designing API. &lt;em&gt;Architect attitude&lt;/em&gt; most of the times leads to non required over complication of resulting code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncertainty in goals, i.e. tasks definition make people to be bound to pick up very different approaches.
Developers need communication and pair working during whole coding process :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately we were out of time, so planned &lt;em&gt;CodingDojo&lt;/em&gt; was not done today.
But in general we achieved all planned goals: got hand dirty in WebDriver and understanding basic principles of creating tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are some of retrospection points after 1st phase of workshop, i.e. &lt;em&gt;Prepared Kata&lt;/em&gt;.
Could be helpful to summarize general approaches while creating &lt;code&gt;WebDriver&lt;/code&gt; tests&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WebDriver&lt;/code&gt; tests are about loading pages, finding elements in &lt;code&gt;DOM tree&lt;/code&gt;, generating click or input actions and assert changes to &lt;code&gt;DOM tree&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage of &lt;code&gt;PageObject&lt;/code&gt; pattern is essential for creating robust and readable tests.
Pattern improves code re-usability and encapsulation of DOM structure manipulations.
After pattern adoption tests tends to turn themselves into classic BDD &lt;em&gt;given/when/then&lt;/em&gt; stories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page or screen should be considered as a set of services provided to a client and &lt;code&gt;PageObjects&lt;/code&gt;
should reflect this by using human readable names for method naming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigation between pages could be represented as returning new &lt;em&gt;PageObject&lt;/em&gt; instances while calling method of initial &lt;em&gt;PageObject&lt;/em&gt;
Web pages are having latency feature. One have to wait before asserting changes made to DOM tree.
Especially with high usage of &lt;code&gt;AJAX&lt;/code&gt; one always should consider necessity of delays between performing the action and asserting its outcome&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Waits should be performed using &lt;code&gt;WebDriver&amp;#8217;s `FluentWait&lt;/code&gt; and &lt;code&gt;WebDriverWait&lt;/code&gt; classes, not &lt;code&gt;Thread.sleep(&amp;#8230;&amp;#8203;)&lt;/code&gt; or similar.
This reduces delays while running tests making code waiting only when needed for element to appear&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests should assert changes happened to UI. If there&amp;#8217;s no changes after some action performed
it means either this action is useless and should be removed from screen or screen requires to be adopted for showing a message after action completed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vanilla &lt;em&gt;TDD (tests before code)&lt;/em&gt; doesn&amp;#8217;t work well with &lt;code&gt;WebDriver&lt;/code&gt; tests, but it’s still playing important part&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Special build scrips should be created for &lt;em&gt;Continuous Integration&lt;/em&gt; of &lt;code&gt;WebDriver&lt;/code&gt; tests.
Scripts should perform checkout, start web server, run tests and stop server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 03 Jan 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/01/03/webdriver-workshop-at-softengi.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/01/03/webdriver-workshop-at-softengi.html</guid>
        
        
      </item>
    
      <item>
        <title>WebDriver tricks - part 1</title>
        <description>&lt;h1&gt;WebDriver tricks - part 1&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally decided to start series (i hope) of blog posts describing tricks that could help developers
to write more robust Selenium / WebDriver tests. Here are two of them.
This information is all covered by Selenium JavaDocs. But if you&amp;#8217;re good programmer - will you ever read JavaDocs ? :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;trick&quot;&gt;Trick&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: How to find element by XPath expression under certain node of HTML tree and not from HTML tree root ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: You should prefix your XPath expression with &lt;code&gt;.//&lt;/code&gt; (dot in the beginning)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having HTML&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;panel1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;ITEM1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;tag&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myClass&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;ITEM2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java test below illustrates the difference&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebElement panel2 = webDriver.findElement(By.id(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));

WebElement el1 = panel2.findElement(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;//span[@class = &#39;myClass&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
WebElement el2 = panel2.findElement(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.//span[@class = &#39;myClass&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));

&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; el1.getText().equals(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ITEM1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; el2.getText().equals(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ITEM2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;XPath expression &lt;code&gt;//span[@class = &#39;myClass&#39;]&lt;/code&gt; makes WebDriver to look for element using HTML root as starting point
even if we call &lt;code&gt;findElement()&lt;/code&gt; not at &lt;code&gt;webDriver&lt;/code&gt; variable.
From other hand using XPath starting from dot, i.e. &lt;code&gt;.//span[@class = &#39;myClass&#39;]&lt;/code&gt;
instructs WebDriver to use &lt;strong&gt;panel2&lt;/strong&gt; as starting point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;trick-2&quot;&gt;Trick&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: How to check that certain element doesn&amp;#8217;t exist in HTML tree.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A: There&amp;#8217;s common &lt;strong&gt;anti-pattern&lt;/strong&gt; frequently used by developers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;WebElement notExist = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
    notExist = webDriver.findElement(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;//div[@id=&#39;iAmNotHere&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
} &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;NoSuchElementException&lt;/span&gt; e) {
}
&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; notExist == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach has enough disadvantages and best practices violations. We ain&amp;#8217;t gonna cover them here ;)
Instead we can use much simpler code to achieve the same result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; webDriver.findElements(By.xpath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;//div[@id=&#39;iAmNotHere&#39;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)).size() == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;p-s-let-s-start-read-javadocs-before-writing-code&quot;&gt;P.S.: Let&amp;#8217;s start read JavaDocs before writing code :)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 23 Dec 2011 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2011/12/23/selenium-webdriver-tricks-1.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2011/12/23/selenium-webdriver-tricks-1.html</guid>
        
        <category>java</category>
        
        <category>webdriver</category>
        
        <category>xpath</category>
        
        <category>how-to</category>
        
        <category>selenium</category>
        
        
      </item>
    
      <item>
        <title>Three steps to follow MVC while building Java Web application</title>
        <description>&lt;h1&gt;Three steps to follow MVC while building Java Web application&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-1&quot;&gt;Step #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;DO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Always process URL (POST forms, link clicking etc) by servlet / action bean and never by JSP&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;WHY&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;ActionBeans&lt;/code&gt; (whatever certain framework call those classes) and rarely servlets are &lt;code&gt;controllers&lt;/code&gt; intended for processing user input.
JSPs are &lt;code&gt;view&lt;/code&gt; engine dedicated to rendering representation of software to client.
Separating user input processing and HTML rendering prevents you from temptation of creating huge,
multi-purpose, untestable JSPs that are mixing business and representation logic and violating MVC pattern.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-2&quot;&gt;Step #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;DO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Render views by forwarding to JSP located only under &lt;code&gt;/WEB-INF/${JSP folder}&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;WHY&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Views should be accessible only by design of software and never directly.
Putting JSPs within root directory of project brings security issues regarding unwanted access to them from clients.
Also practice of hiding all JSPs under &lt;code&gt;/WEB-INF&lt;/code&gt; reduces possibility of URL being processed by JSP and not controller and help us to follow &lt;strong&gt;step #1&lt;/strong&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3&quot;&gt;Step #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;DO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Pass model from controller to view only by using request attributes or flash scope&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;WHY&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;All other ways of view being able to access some data are too limited or insecure.
Using request parameters directly within view can be the option for malicious user to pass invalid data.
Using session for storing information is causing memory consumption and requires mechanisms to clear unused data after expiration.
Cookies depends on browser, limited in size and not very friendly to use.
From the other hand - request attributes lacks all those drawback and propose clean
decoupling of controller responsibility (update model) and view responsibility (read model).
Flash scope becomes very handy when it comes to &lt;code&gt;Redirect After Post&lt;/code&gt; pattern where request attributes can&amp;#8217;t be used.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ps&quot;&gt;PS:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All modern &lt;em&gt;action-based&lt;/em&gt; frameworks are using steps described below to achieve their goals.
But if you using some old fashioned code or don&amp;#8217;t use any framework at all - you still can achieve good clean and easy to use MVC.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 12 Dec 2011 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2011/12/12/three-steps-to-follow-mvc-while.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2011/12/12/three-steps-to-follow-mvc-while.html</guid>
        
        <category>java</category>
        
        <category>mvc</category>
        
        <category>web</category>
        
        
      </item>
    
  </channel>
</rss>
