<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JK&#39;s blog</title>
    <description>Simple blog for some thoughts to be shared. Mostly about Java programming</description>
    <link>http://eshepelyuk.github.io/</link>
    <atom:link href="http://eshepelyuk.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Nov 2014 17:47:19 +0000</pubDate>
    <lastBuildDate>Sat, 29 Nov 2014 17:47:19 +0000</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title> Testing Jvm Javascript Jasmine Spock Nashorn</title>
        <description>:imagesdir: /images/2014-11-26
= Testing JVM server-side JavaScript with Jasmine, Spock and Nashorn

`JavaScript` usage is not limited to client-side code in browser or `NodeJS` powered server-side code.
Many `JVM` based projects are using it as internal scripting language.
Testing this sort of functionality is neither straightforward nor standard.
In this post I intend to demonstrate an approach for testing `JavaScript` in server-side JVM environment
using mature tools like `Jasmine`, `Spock` and `Nashorn`.

Using JavaScript as scripting engine inside JVM application has significant difference comparing to client-side coding.
And unfortunately there&#39;s no industrial standard tools nowadays for testing it. 

Regarding existing approaches found in Internet I&#39;d like to highlight following disadvantages::
* lack of integration with build and _continuous integration_ tools (Maven, Gradle, Jenkins, etc.)
* insufficient cooperation with IDEs
** no possibility to run single suite or test from IDE
** unable to view test execution reports from IDE
* tight coupling to browser environment
* no possibility of using customized `JavaScript` executors

As far as I&#39;ve seen most of the projects test their embedded business scripts by calling JS engine runner, 
passing script under test to it and doing assertion by inspecting side-effects on engine or mocks after script execution.

Those sort of approaches usually have similar drawbacks::
* hard to stub or mock something in JS code, usually ending up hacking on JS `prototype`
* need too much orchestration for mocking environment for script
* hard to organize tests into suites and report test execution errors
* previous causes creation of custom test suite frameworks for particular project
* not leveraging existing JavaScript testing tools and frameworks

So, driven by the need for comfortable embedded JavaScript testing in JVM projects I&#39;ve created this sample setup.
To fulfill our goals next tools will be used.

* `Jasmine` is one of the most known TDD/BDD tools for JavaScript
* `Spock` is great testing framework for JVM powered by Junit and Groovy
* `Nashorn` is modern scripting engine introduced in JDK8

== Customized JavaScript runner (Nashorn based)

There&#39;s no need to conform standards in non-browser JS environments, so usually
developers extend scripting engine with custom functions, built-in variables etc.
It is extremely important to use exactly the same runner both for production and testing purposes.

Let&#39;s consider we have such customized runner, accepting script name and map of predefined variables as parameters 
and returning resulting value of the executed script.

[source,java]
.JavaScriptRunner.java
----
public class JavaScriptRunner {
  public static Object run(String script, Map&lt;String, Object&gt; params) throws Exception {
    ScriptEngineManager factory = new ScriptEngineManager();
    ScriptEngine engine = factory.getEngineByName(&quot;nashorn&quot;);
    engine.getBindings(ScriptContext.ENGINE_SCOPE).putAll(params);
    return engine.eval(new InputStreamReader(JavaScriptRunner.class.getResourceAsStream(script))); &lt;1&gt;
  }
}
----
&lt;1&gt; script source is searched in classpath.
 
== Jasmine setup

To start using `Jasmine` framework we need

* https://github.com/pivotal/jasmine/releases/download/v2.1.2/jasmine-standalone-2.1.2.zip[download Jasmine^] 
and unpack it to `/jasmine/jasmine-2.1.2` folder in project resources directory
* custom bootstrap script, since `Jasmine` doesn&#39;t support JVM based platforms

[source, javascript]
.jasmine2-bootstrap.js
----
var loadFromClassPath = function(path) { &lt;1&gt;
  load(Java.type(&quot;ua.eshepelyuk.blog.nashorn.Jasmine2Specification&quot;).class.getResource(path).toExternalForm());
};

var window = this;

loadFromClassPath(&quot;/jasmine/jasmine-2.1.2/jasmine.js&quot;);
loadFromClassPath(&quot;/jasmine/jasmine2-html-stub.js&quot;); &lt;2&gt;
loadFromClassPath(&quot;/jasmine/jasmine-2.1.2/boot.js&quot;);
load({script: __jasmineSpec__, name: __jasmineSpecName__}); &lt;3&gt;

onload(); &lt;4&gt;

jsApiReporter.specs(); &lt;5&gt;
----
&lt;1&gt; helper function resolving script path from classpath location.
&lt;2&gt; `Nashorn` specific code adjusting `Jasmine` for non-browser environments. Not a part of `Jasmine` distribution.
&lt;3&gt; loading test suite source code, see next section for details.
&lt;4&gt; faking browser `load` event, that should trigger test suite execution.
&lt;5&gt; this value will be returned as script result.

== Transform Jasmine report into Spock tests

Having JS executor and bootstrap script for `Jasmine` we could create `JUnit` test 
to iterate over suite results and check if all are successful. 
But it will become a nightmare to understand which particular test had failed and what is the reason of failure.
What we&#39;d really like to have is ability to represent each `Jasmine` specification as `JUnit` test,
so any Java tool can pick up and inspect the results. 
Here why `Spock` could be the answer to the problem, with its
http://spock-framework.readthedocs.org/en/latest/data_driven_testing.html[Data Driven Testing^]
that allows developer to declare list of input data and for each item of that dataset new test will be created and executed.
This is very similar to https://github.com/junit-team/junit/wiki/Parameterized-tests[Parametrized Test] of `Junit`
but much more powerful implementation.

So the idea will be to consider `Jasmine` test suite results obtained after running bootstrap script
as array of input data, whose every item will be passed to `Spock` test.
Then test itself will provide assertion to report successful and failed tests properly, i.e.
assertion should check status of `Jasmine` specification.

* if status is `pending` or `passed`, this means specification is either ignored or successful
* otherwise `Spock` test should throw assertion error, populating assertion exception populated with failures messages reported by `Jasmine`

[source,groovy]
.Jasmine2Specification.groovy
----
abstract class Jasmine2Specification extends Specification {
  @Shared def jasmineResults

  def setupSpec() {
    def scriptParams = [
        &quot;__jasmineSpec__&quot;    : getMetaClass().getMetaProperty(&quot;SPEC&quot;).getProperty(null), &lt;1&gt;
        &quot;__jasmineSpecName__&quot;: &quot;${this.class.simpleName}.groovy&quot;
    ]
    jasmineResults = JavaScriptRunner.run(&quot;/jasmine/jasmine2-bootstrap.js&quot;, scriptParams) &lt;2&gt;
  }

  def isPassed(def specRes) {specRes.status == &quot;passed&quot; || specRes.status == &quot;pending&quot;}

  def specErrorMsg(def specResult) {
    specResult.failedExpectations
	.collect {it.value}.collect {it.stack}.join(&quot;\n\n\n&quot;)
  }

  @Unroll def &#39;#specName&#39;() {
    expect:
      assert isPassed(item), specErrorMsg(item) &lt;3&gt;
    where:
      item &lt;&lt; jasmineResults.collect { it.value }
      specName = (item.status != &quot;pending&quot; ? item.fullName : &quot;IGNORED: $item.fullName&quot;) &lt;4&gt;
  }
}
----
&lt;1&gt; exposing source code of `Jasmine` suite as __jasmineSpec__ variable, accessible to JS executor.
&lt;2&gt; actual execution of `Jasmine` suite.
&lt;3&gt; for each suite result we `assert` either it is succeeded, throwing assertion error with `Jasmine` originated message on 
failure.
&lt;4&gt; additional data provider variable to highlight ignored tests.

== Complete example

Let&#39;s create test suite for simple JavaScript function.

[source, javascript]
.mathUtils.js
----
var add = function add(a, b) {
  return a + b;
};
----

Using base class from previous step we could create `Spock` suite containing JavaScript tests.
To demonstrate all the possibilities of our solution we will create successful, failed and ignored test.

[source,groovy]
.MathUtilsTest.groovy
----
class MathUtilsTest extends Jasmine2Specification {
    static def SPEC = &quot;&quot;&quot; &lt;1&gt;
loadFromClassPath(&quot;/js/mathUtils.js&quot;); &lt;2&gt;
describe(&quot;suite 1&quot;, function() {
  it(&quot;should pass&quot;, function() {
    expect(add(1, 2)).toBe(3);
  });
  it(&quot;should fail&quot;, function() {
    expect(add(1, 2)).toBe(3);
    expect(add(1, 2)).toBe(0);
  });
  xit(&quot;should be ignored&quot;, function() {
    expect(add(1, 2)).toBe(3);
  });
})
&quot;&quot;&quot;
}
----
&lt;1&gt; actual code of `Jasmine` suite is represented as a `String` variable.
&lt;2&gt; loading module under test using function inherited from `jasmine-bootstrap.js`.

.Test results from IntelliJ IDEA
image::1.png[Test results from IntelliJ IDEA]

== IntelliJ Idea language injection

Although this micro framework should work in all the IDEs the most handy usage of it will be within *IntelliJ IDEA*
thanks to its https://www.jetbrains.com/idea/help/using-language-injections.html[language injection^].
The feature allows to embed arbitrary language into file created in different programming language. 
So we could have JavaScript code block embedded into `Spock` specification written in Groovy.

.Language injection
image::2.png[Language injection]

== Pros and cons of the solution

Advantages::
* usage of industry standard testing tools for both languages
* seamless integration with build tools and continuous integration tools
* ability to run single suite from IDE
* run single test from the particular suite, thanks to http://pivotallabs.com/new-key-features-jasmine-2-1/[focused feature of Jasmine^]

Disadvantages::
* no clean way of detecting particular line of source code in case of test exception
* a little bit `IntelliJ IDEA` oriented setup

== P.S.

For this sample project I&#39;ve used modern `Nashorn` engine from JDK8.
But in fact there&#39;s no limitation on this. The same approach was successfully applied for projects using older `Rhino` engine.
And then again, `Jasmine` is just my personal preference. 
With additional work code could be adjusted to leverage `Mocha`, `QUnit` and so on.

NOTE: Full project&#39;s code is available at https://github.com/eshepelyuk/CodeForBlog/tree/master/TestMeIfYouCanNashornSpock[My GitHub^]
</description>
        <pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2014/11/26/-testing-jvm-javascript-jasmine-spock-nashorn.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2014/11/26/-testing-jvm-javascript-jasmine-spock-nashorn.html</guid>
        
        <category>java</category>
        
        <category>nashorn</category>
        
        <category>tdd</category>
        
        <category>javascript</category>
        
        <category>jasmine</category>
        
        <category>groovy</category>
        
        <category>spock</category>
        
        
      </item>
    
      <item>
        <title>Advanced Jekyll And Asciidoctor</title>
        <description>:imagesdir: /images/2014-11-06
= Advanced integration of Jekyll and AsciiDoctor

Using `AsciiDoctor` as markup renderer in `Jekyll` is quite straightforward 
but there&#39;s some customization gaps not covered in the most of setup guides over the web
so I&#39;d like to fill them in this post.

This tutorial implies you already having sample Jekyll site created 
and AsciiDoctor plugin enabled as described in corresponding pages.

* http://jekyllrb.com/docs/installation/[Jekyll installation^]
* https://github.com/asciidoctor/jekyll-asciidoc[Jekyll-AsciiDoc plugin^]

[WARNING]
=====
If you are Windows user you probably will fail while running Jekyll sample site at the first time because of `Yajl` related error. 
The error caused by default syntax highlighter library `Pygments` that is not working on Windows out of the box.
To overcome the issue I&#39;ve replaced it with `Coderay` - pure Ruby implementation, by adding a line to Jekyll config.
[source,yaml]
._config.yml
highlighter: coderay

So please keep in mind that this tutorial assumes you are using `Coderay` for highlighting code blocks in AsciiDoctor generated HTML.
=====

== Sample AsciiDoctor page

Let&#39;s create page `sample.adoc` and put it to root folder of the site.

```
---
---
:layout: page
= Sample Page

== This is a header

This is a sample page composed in AsciiDoc.
Jekyll converts it to HTML using http://asciidoctor.org[Asciidoctor].

CAUTION: very important tip

[source,ruby]
.sample.rb
----
puts &quot;Hello, World!&quot;
----
```

After running Jekyll you should be able to reach the page at http://localhost:4000/sample.html[^].
Obviously you&#39;d notice quite ugly look and feel and something wrong with generated HTML as well.

image::2.png[]

== Applying default AsciiDoctor stylesheet

AsciiDoctor _gem_ contains default CSS that decorates HTML in quite pretty way.
Just find file named `asciidoctor-default.css` within _gem_ files,
e.g. `$RUBY_HOME/lib/ruby/gems/2.1.0/gems/asciidoctor-1.5.1`, 
put it to `css` folder of the site and add this line to `_includes/head.html` file

[source, html]
&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/asciidoctor-default.css&quot;&gt;

== Displaying AsciiDoctor icons using FontAwesome

By default AsciiDoctor renders markup icons, like admonitions, etc., using HTML tags and CSS styles relying on external stylesheet and image files.
But there is no need to keep dedicated images for displaying such icons.
Instead one could leverage *icon font* concept supported by AsciiDoctor.

`FontAwesome` is default *icon font* library used by AsciiDoctor.
It is a dedicated vector font comprising icons images instead of letters,
thus allowing you to display nice and scalable icons on a web page without need for any PNG/JPG/etc files.

Add font library to your site as described in _BootstrapCDN_ section
of http://fortawesome.github.io/Font-Awesome/get-started/[FontAwesome Get Started^] guide.
As for sample Jekyll site you should amend `_includes/head.html`.

[source,html]
&lt;link href=&quot;http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;

Then enable AsciiDoctor *font icons* support in Jekyll config.

[source,yaml]
._config.yml
----
asciidoctor:
  attributes:
    - icons=font
----

== Turning on Coderay source code highlighting for AsciiDoctor files

NOTE: This entire section can be skipped if you are using `Pygments`.

Since I&#39;m using  `Coderay` as default Jekyll source code highlighting library we should also instruct AsciiDoctor to use it for source code blocks generation.
This is done by adding couple of additional AsciiDoctor attributes to Jekyll config.

[source,yaml]
._config.yml
----
asciidoctor:
  attributes:
    - icons=font
    - source-highlighter=coderay
    - coderay-css=style
----

== The outcome

After performing all the steps described above you will see better looking HTML with all features available in generated HTML
while accessing http://localhost:4000/sample.html[^].

image::3.png[]



























</description>
        <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2014/11/06/advanced-jekyll-and-asciidoctor.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2014/11/06/advanced-jekyll-and-asciidoctor.html</guid>
        
        <category>jekyll</category>
        
        <category>asciidoctor</category>
        
        <category>coderay</category>
        
        <category>fontawesome</category>
        
        <category>howto</category>
        
        
      </item>
    
      <item>
        <title>Automate Github Pages Travisci</title>
        <description>:imagesdir: /images/2014-10-28
= Automate GitHub Pages publishing with Jekyll and Travis CI

Content is a *KING*. Neither fancy CMS nor online WYSYWIG editors are, but content is.
That&#39;s why `Jekyll` powered  `GitHub Pages` got such a popularity.
Just push `HTML`, `Liquid`, `Markdown` etc, then files got processed by `Jekyll` 
and the whole site becomes available online in a minute.
However, if you&#39;d like to use extra `Jekyll` features, for instance `AsciiDoctor`, you should manage site generation yourself.
This quite boring activity could be simplified by leveraging `Travis CI` continuous integration project.

== Setting up Jekyll

The only precondition is that you have `Jekyll` site already configured using http://bundler.io/[Bundler^] and you can run it locally with

[source]
bundle exec jekyll serve

== Setting up Travis CI

The whole idea was to make publishing experience of highly customized `Jekyll` project to `GitHub Pages` exactly the same
as publishing of standard `Jekyll` site. You just push your changes to `git`, wait couple of minutes and refresh the page with new content.

I&#39;m using _User Pages_ approach https://help.github.com/articles/using-jekyll-with-pages/[as described here^]
so I have two branches for my setup

* `master` for generated static content
* `jekyll` for markup sources and configuration

The goal is to configure `Travis CI` job to listen for commits on `jekyll` branch, 
then run `jekyll build` for process markup sources and then push generated content to `master` branch.

=== Enable Hooks

To make `Travis CI` listen for commits and do actual work - we have to enable hooks.

image::2.png[Enable Travis CI hook]

=== Travis CI configuration

Then let&#39;s limit commit trigger to `jekyll` branch only and explicitly configure the script that will be executed after commit detection.
For this we have to put file `.travis.yml` to the root of `jekyll` branch with following content.
[source,yaml]
.+++.travis.yml+++
----
language: ruby
script: &quot;./build.sh&quot; # execute this script on each commit
branches:
  only:
  - jekyll # only take into account `jekyll&#39; branch
rvm:
- 2.1.2 # version of `ruby&#39; 
----

=== Generate and encrypt GitHub token for Travis Ci

Since we&#39;d need to commit and push our changes to other (`master`) branch from within the build script
it&#39;s mandatory to checkout this branch either using `HTTPS` or `SSH` protocol, as described	https://gist.github.com/grawity/4392747[HERE^]
Easiest way for us is to clone using `HTTPS` protocol and use  _personal access token_ for authentication. 

* https://help.github.com/articles/creating-an-access-token-for-command-line-use/[How to generate GitHub Token^]
* Generate GitHub token

image::1.png[Generate GitHub token]

CAUTION: Copy generated token somewhere to be used in the next step.

Putting clear text tokens into script isn&#39;t good idea, but thanks to `travis` command line tool 
we can encrypt any `name=value` pair and later expose then as environment variables to the build job.

Execute following code in the working directory where `jekyll` branch is cloned to.

[source]
----
gem install travis
travis encrypt GH_TOKEN=&lt;token&gt; --add env.global
----

The command above should add following lines to your `.travis.yml`.
[source,yaml]
----
env:
  global:
    secure: HERE GOES ENCRYPTED STUFF
----

==== Build script

And finally the build script.

[source]
.build.sh
----
#!/bin/bash

# only proceed script when started not by pull request (PR)
if [ $TRAVIS_PULL_REQUEST == &quot;true&quot; ]; then
  echo &quot;this is PR, exiting&quot;
  exit 0
fi

# enable error reporting to the console
set -e 

# build site with jekyll, by default to `_site&#39; folder
jekyll build

# cleanup
rm -rf ../eshepelyuk.github.io.master

#clone `master&#39; branch of the repository using encrypted GH_TOKEN for authentification
git clone https://${GH_TOKEN}@github.com/eshepelyuk/eshepelyuk.github.io.git ../eshepelyuk.github.io.master

# copy generated HTML site to `master&#39; branch
cp -R _site/* ../eshepelyuk.github.io.master

# commit and push generated content to `master&#39; branch
# since repository was cloned in write mode with token auth - we can push there
cd ../eshepelyuk.github.io.master
git config user.email &quot;eshepelyuk@gmail.com&quot;
git config user.name &quot;Evgeny Shepelyuk&quot;
git add -A .
git commit -a -m &quot;Travis #$TRAVIS_BUILD_NUMBER&quot;
git push --quiet origin master &gt; /dev/null 2&gt;&amp;1 &lt;1&gt;
----
&lt;1&gt; Hiding all the output from `git push` command, to prevent token leak.

== Run everything

After doing all those steps all you need is to commit and push your `jekyll` branch 
and then navigate to https://travis-ci.org/eshepelyuk/eshepelyuk.github.io/builds[Travis CI^] build section 
of your project to monitor your build progress.

== P.S.

I hope this tutorial help you setup own `Jekyll` with less pain. 
Supposedly described steps could be applied to other static site generators like `Middleman`, `Awestruct` etc.

== Credits

The actual setup and this post was inspired by https://twitter.com/mojavelinux[Dan Allen^] reply to my tweet
and the code from https://github.com/johncarl81/transfuse/tree/transfuse-jeykll-site[this project^]
</description>
        <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2014/10/28/automate-github-pages-travisci.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2014/10/28/automate-github-pages-travisci.html</guid>
        
        <category>jekyll</category>
        
        <category>github</category>
        
        <category>asciidoctor</category>
        
        <category>travisci</category>
        
        <category>howto</category>
        
        
      </item>
    
      <item>
        <title>Test Me If You Can 1</title>
        <description>= Test Me If You Can #1 (Spring Framework)

During my career I often observed people who claim that they are not writing tests because *can&#39;t cover properly* integration between components. 
Well, I believe most of such people just don&#39;t know some simply techniques or don&#39;t have time to dig them out because of stress at their work place. 
The lack of such knowledge results into neglecting of integration tests and thus worse software, more bugs and disappointed customer.
So I&#39;ve decided to share some practices revealing mystery surrounding integration testing.

== Better integration test for Spring based projects

Tools: `Spring`, `JUnit`, `Mockito`

Imagine the situation with `Spring` based project that&#39;s integrating an external service, e.g. some bank web services. 
Issues related to writing test cases and running them within CI for such code are usually the same

* price per transaction, each time test executed - customer pays
* tests requests can be interpreted as suspicious traffic, account blocked - tests failures
* when using non production environments for tests, it can be unstable - again, tests failures

Usually such problems can be solved by mocking such external service while testing single class that using it, 
but when it comes to the need for test larger business flow - you need to run your tests again many components 
and made them managed by your container - `Spring`.
Luckily `Spring` has great http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/testing.html[test framework^] 
allowing injection of beans from production configuration, but one needs to mock external services himself. 
First intention could be creating mocks in `setUp` section of the test and re-inject beans previously injected by `Spring`, but think more about it

WARNING: You&#39;re overriding behavior of container for your test, so there&#39;s no guarantee it will work the same way for real services on real environment.

Instead we have not to mock our external services and then re-inject them into corresponding beans, but *make `Spring` inject mocks in place of particular beans
, required for our test goals*. Let&#39;s illustrate this with code.

My sample project comprises `BankService` representing external service and `UserBalanceService` - our service working with `BankService`. 
`UserBalanceService` is quite simple wrapper - just making conversion from `String` to `Double`.

[source,java]
.BankService.java
----
public interface BankService {
    String getBalanceByEmail(String email);
}
----

[source,java]
.BankServiceImpl.java
----
public class BankServiceImpl implements BankService {
    @Override
    public String getBalanceByEmail(String email) {
        throw new UnsupportedOperationException(&quot;Operation failed due to external exception&quot;);
    }
}
----

[source,java]
.UserBalanceService.java
----
interface UserBalanceService {
    Double getAccountBalance(String email);
}
----

[source,java]
.UserBalanceServiceImpl.java
----
public class UserBalanceServiceImpl implements UserBalanceService {
    @Autowired
    private BankService bankService;
    @Override
    public Double getAccountBalance(String email) {
        return Double.valueOf(bankService.getBalanceByEmail(email));
    }
}
----

And the `Spring` dependency XML configuration wiring everything together

[source,xml]
.applicationContext.xml
----
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;bankService&quot; class=&quot;ua.eshepelyuk.blog.springtest.springockito.BankServiceImpl&quot;/&gt;
    &lt;bean id=&quot;userBalanceService&quot; class=&quot;ua.eshepelyuk.blog.springtest.springockito.UserBalanceServiceImpl&quot;/&gt;
&lt;/beans&gt;
----

Our test will look like

[source,java]
.UserBalanceServiceImplTest.java
----
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = &quot;classpath:/springtest/springockito/applicationContext.xml&quot;)
public class UserBalanceServiceImplProfileTest {
    @Autowired
    private UserBalanceService userBalanceService;
    @Autowired
    private BankService bankService;
    @Test
    public void shouldReturnMockedBalance() {
        Double balance = userBalanceService.getAccountBalance(&quot;user@bank.com&quot;);
        assertEquals(balance, Double.valueOf(123.45D));
    }
}
----

As expected after test run we will have `UnsupportedOperationException`. Our intention is to replace `BankService` with mock and tune its behavior. 
It&#39;s possible to use `Mockito` directly as factory bean 
but there&#39;s better alternative - https://bitbucket.org/kubek2k/springockito/wiki/Home[Springockito framework^]. 
Please take a look before proceed :)

The remaining question is how to instruct `Spring` to inject mocks instead of real beans, 
Prior to version 3.1 there were no alternatives except creating brand new XML configuration for using it in test. 
But with introduction of http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released[Bean Definition Profiles^]
we now able to create more elegant solution for this, although we still need separate XML for test purposes. 
This is how resulting test XML configuration will look like
[source,xml]
.testApplicationContext.xml
----
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:mockito=&quot;http://www.mockito.org/spring/mockito&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.mockito.org/spring/mockito https://bitbucket.org/kubek2k/springockito/raw/tip/springockito/src/main/resources/spring/mockito.xsd&quot;&gt;
    &lt;import resource=&quot;classpath:/springtest/springockito/applicationContext.xml&quot;/&gt;
    &lt;beans profile=&quot;springTest&quot;&gt;
        &lt;mockito:mock id=&quot;bankService&quot; class=&quot;ua.eshepelyuk.blog.springtest.springockito.BankService&quot;/&gt;
    &lt;/beans&gt;
&lt;/beans&gt;
----

And the test modified accordingly.
[source,java]
.UserBalanceServiceImplProfileTest.java
----
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = &quot;classpath:/springtest/springockito/testApplicationContext.xml&quot;)
@ActiveProfiles(profiles = {&quot;springTest&quot;})
public class UserBalanceServiceImplProfileTest {
    @Autowired
    private UserBalanceService userBalanceService;
    @Autowired
    private BankService bankService;
    @Before
    public void setUp() throws Exception {
        Mockito.when(bankService.getBalanceByEmail(&quot;user@bank.com&quot;)).thenReturn(String.valueOf(123.45D));
    }
    @Test
    public void shouldReturnMockedBalance() {
        Double balance = userBalanceService.getAccountBalance(&quot;user@bank.com&quot;);
        assertEquals(balance, Double.valueOf(123.45D));
    }
}
----

You may notice appearance of `setUp` method for setting up the mock behavior and new `@Profile` annotation. 
The annotation activates our profile `springTest` so bean mocked with `Springockito` will be injected where necessary. 
On running this the test will pass, because `Spring` injected `Mockito` mock that we&#39;ve configured in test XML and not the external service instance.

== Don&#39;t stop on the way to perfectness

It could be the end of the story be we could still go deeper on the problem. 
`Springockito` creator has another framework https://bitbucket.org/kubek2k/springockito/wiki/springockito-annotations[Springockito Annotations^]. 
The framework allows mock injection using annotation within test classes. 
Please skim read it before proceed :)
After some modification code of our test will look this way.
[source, java]
.UserBalanceServiceImplAnnotationTest
----
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(loader = SpringockitoContextLoader.class, 
    locations = &quot;classpath:/springtest/springockito/applicationContext.xml&quot;)
public class UserBalanceServiceImplAnnotationTest {
    @Autowired
    private UserBalanceService userBalanceService;
    @Autowired
    @ReplaceWithMock
    private BankService bankService;
    @Before
    public void setUp() throws Exception {
        Mockito.when(bankService.getBalanceByEmail(&quot;user@bank.com&quot;)).thenReturn(String.valueOf(valueOf(123.45D)));
    }
    @Test
    public void shouldReturnMockedBalance() {
        Double balance = userBalanceService.getAccountBalance(&quot;user@bank.com&quot;);
        assertEquals(balance, valueOf(123.45D));
    }
}
----

Please note that no new XML configuration required. We&#39;re using production XML config and just override single bean using `@ReplaceWithMock` annotation.
Later we can customize the mock in `setUp` method. 

== P.S.
`Springockito-annotations` project has one great advantage - it provides test code only based dependency override mechanism. 
Neither additional XML, nor production code modifications for test purposes. 
Unlike `springockito-annotations` approach the XML based one makes creation of test specific XML mandatory always. 
So I strongly recommend using `Springockito-annotations` project for your integration tests, 
so they won&#39;t affect your production code design and won&#39;t produce additional artifacts - i.e. test XML configuration files.

== P.P.S.

Writing integration tests for Spring is easy ! Project can be found on https://github.com/eshepelyuk/CodeForBlog/tree/master/TestMeIfYouCan1[My GitHub^]


</description>
        <pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2013/06/28/test-me-if-you-can-1.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2013/06/28/test-me-if-you-can-1.html</guid>
        
        <category>java</category>
        
        <category>tdd</category>
        
        <category>spring</category>
        
        <category>mockito</category>
        
        <category>springockito</category>
        
        
      </item>
    
      <item>
        <title>Duck Typing In Java Well Not Exactly</title>
        <description>= Duck typing in Java ? Well, not exactly

What is it all about ? According to Wikipedia duck typing is

[quote, Wikipedia]
____
style of dynamic typing in which an object&#39;s methods and properties determine the valid semantics, 
rather than its inheritance from a particular class or implementation of a specific interface
____

In simpler words 

[quote]
When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck

In languages with dynamic typing this feature allows creating function that are not checking type of passed object 
but instead rely on existence of particular methods/properties within it and throws runtime exception when those properties not found. 
For instance, in `Groovy` we could have a function for printing out info about an entity 

[source,groovy]
----
def printEntity = {entity -&gt;
  println &quot;id: ${entity.id}, name: ${entity.name}&quot;
}
----

Let&#39;s say we have following class 
[source,groovy]
----
class Entity {
  Long id
  String name
}
----

So we can invoke our function
----
printEntity(new Entity(id: 10L, name: &#39;MyName1&#39;))
id: 10, name: MyName1
----

But the same time we could pass map as argument 
----
printEntity([&#39;id&#39;:10L, &#39;name&#39;:&#39;MyName2&#39;])
id: 10, name: MyName2
----

Using metaprogramming magic we could write even following
[source,groovy]
----
class Ghost {
 def propertyMissing(String name) {
  if (name == &#39;id&#39;) {
   return -1L
  } else if (name == &#39;name&#39;) {
   return &quot;StubName&quot;
  }
 }
}
----

And we will be still able to call our function
----
printEntity(new Ghost())
id: -1, name: StubName
----

== Welcome to the real world

Fortunately this concept can be used not only for languages with dynamic typing but for ones with more strict typing model, as `Java`. 
Wikipedia has good http://en.wikipedia.org/wiki/Duck_typing#In_Java[example, window=&quot;_blank&quot;] of duck typing implementation in `Java`
using `Proxy` class. 

Well, you&#39;d say, what is the practical usage of this, except feeling oneself the wisest guru :) 
Let me show some real life task that was solved in Java using _Duck Typing_ technique.

From the beginning we had simple report generator that queries DB of products and outputs id and name of certain entity. 

|====
|id|name

|123|Phone #1
|222|Book #2
|====

But then customer says: 
[quote]
____
I&#39;d like to also have link to the entity detail page at our site. 
Beautiful, SEO friendly link. Could you do it to me ?
____

&quot;Sure &quot;, I said. After digging our codebase I&#39;ve discovered cool function `generateSeoUrl()` that does the job. 
The function takes one argument of type `Entity`, which is interface. 
So my intention was to observe implementations of `Entity` and try to use one of them for SEO URL creation in the report generator. 
How surprised was I after discovering that all of them are part of some self made _ORM_ tool 
and their constructors query DB to get the entire information about product.

So if I were using `Entity` implementations I had to deal with one extra query per row of my report and this is unacceptable 
since report was comprised of huge number of rows. So I decided to try other approach and implement `Entity` interface, 
overriding methods that are used by `generateSeoUrl()`. 
I clicked my IDE shortcut and got surprised again. `Entity` had *50 (!!!)* methods. 
Well, I already knew that only `getEntityId()` and `getName()` are used by `generateSeoUrl()` function, 
but then again, having new class with 50 empty methods just to override 2 of them doing useful action seemed not good idea for me. 
Thus I&#39;ve decided stop trying coding and start to think :) 
Extend some of the `Entity` implementation to prevent querying DB or copy + paste `generateSeoUrl()` and adopt it for my needs 
were the options but still it was not beautiful. Especially when I reminded duck typing. 
I said to myself, we have a function that takes instance of `Entity` but only uses two method of this interface, 
so to complete my task I need something that looks like `Entity` and able to handle `getEntityId` and `getName()` methods.

Since `entityId` and `name`  were already present in data used for generating my report I could reuse them in my new class to stub data for `getEntityId()` and `getName()`. 
To achieve duck typing we need to create `Proxy` that also implements `InvocationHandler` interface 
and static method to retrieve instance of `Proxy`. Final code of my class looks like

[source,java]
----
public class ReportEntitySupport implements InvocationHandler {
    public static Entity newInstance(Long entityId, String name) {
        return (Entity) Proxy.newProxyInstance(
                Product.class.getClassLoader(),
                Product.class.getInterfaces(),
                new ReportEntitySupport(entityId, name)
        );
    }
 
    private final String name;
    private final Long entityId;
 
    private ReportEntitySupport(Long entityId, String name) {
        this.name = name;
        this.entityId = entityId;
    }
 
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (method.getName().equals(&quot;getName&quot;)) {
            return this.name;
        } else if (method.getName().equals(&quot;getEntityId&quot;)) {
            return this.entityId;
        }
        return null;
    }
}
----

So how to use it ?

Inside my report generator while iterating over `ResultSet` I&#39;m using following 
[source,java]
----
Long entityId = ...;	//retrieve entityId from ResultSet
String name = ...; 		//retrieve name from ResultSet

Entity entity = ReportEntitySupport.newIntance(entityId, name);
String seoUrl = generateSeoUrl(entity);
...
----



</description>
        <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/09/15/duck-typing-in-java-well-not-exactly.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/09/15/duck-typing-in-java-well-not-exactly.html</guid>
        
        <category>java</category>
        
        <category>groovy</category>
        
        <category>duck typing</category>
        
        
      </item>
    
      <item>
        <title>Codingdojocnua 6</title>
        <description>:linkattrs:
= CodingDojoCnUa #6

Today, 28th of July, our CodingDojoCnUa community successfully conducted 6th Coding Dojo. 
We met at Chernihiv&#39;s office of SysIQ, as few times before. 
The subject of our session was `RomanNumerals` kata - description can be found by http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals[HERE]. 
Main thing distinguishing this Dojo from previous ones was splitting the attendees into two separate teams 
that were working on their own without shared _Design Session_. 
Each team was responsible for figuring out own implementation and eventually produced working code together with unit tests. 
Both implementation can be found at GitHub

* https://github.com/eshepelyuk/CodingDojoCnUa/tree/master/Dojo6/teamA[Code for TeamA, window=&#39;_blank&#39;]
* https://github.com/eshepelyuk/CodingDojoCnUa/tree/master/Dojo6/teamB[Code for TeamB, window=&#39;_blank&#39;]

== What we&#39;ve discovered

First things to mention that team provided completely different solutions to the same problem. 
Relative simplicity of Kata seemed to help coders to split task into smaller parts thus supporting true incremental development, 
concentrating on providing small slices of functionality after creating failed test. 
Unlike previous times there were no attempts to create `God Functions` immediately after start of Dojo. 
Although longer Design Sessions are essential to make team move faster and effectively with incremental development.

Second main observation is that few peoples who don&#39;t use TDD on daily basis realized that this approach 
could significantly affect original design of algorithm and even imposes final design. 
On retrospective meeting one of us described this impression  

[quote]
People saw TDD in action.

3rd and the shortest - `CoffeeScript` tastes better each time you try it :)

== What we&#39;re gonna try next time ? 

Apparently largest negative issue raised on retro was isolation of members within own team and lack of inter-team communication. 
Attendees suggested various options, even tackle more complicated task than kata, 
like some sort of network game, and go through complete process of application development.

But finally we agreed on just to exchange team members in the middle of next Dojo 
to see if this is helpful for coding and / or brings more fun to the event :)

Some photos http://www.facebook.com/media/set/?set=oa.378960365504429&amp;amp;type=1[@Facebook, window=&#39;_blank&#39;]
</description>
        <pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/28/codingdojocnua-6.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/28/codingdojocnua-6.html</guid>
        
        <category>coffeescript</category>
        
        <category>coding dojo</category>
        
        <category>kata</category>
        
        
      </item>
    
      <item>
        <title>Seleniumwebdriver Tricks Part 3</title>
        <description>= WebDriver tricks #3

== Intro
It&#39;s common case for dynamic pages to show / hide some elements basing on user&#39;s actions. 
But covering them with stable WebDriver tests could be sometimes cumbersome. 
I&#39;ll try to explain couple of techniques helping to deal with that sort of web pages. 

== Case #1
First approach I&#39;d like to describe is rendering all the elements on page load but set CSS `display` property to `none` 
and later set it to empty or `block` to make element visible.

In this case we can&#39;t just check visibility by using `webDriver.findElement(...)` since it will return valid element but we don&#39;t know if it visible or not. 
Fortunately `WebElement` interface has method `isDisplayed()`, however obvious solution `webDriver.findElement(...).isDisplayed()`
could be erroneous because JavaScript code that changes element visibility works with delays. 
To overcome such problems we can use `WebDriverWait` class.

[source,java]
----
WebDriverWait webDriverWait = new WebDriverWait(webDriver, 10L);
WebElement visibleElement = webDriverWait.until(new Function&lt;Webdriver, WebElement&gt;() {
	@Override
	public WebElement apply(WebDriver webDriver) {
		WebElement we = webDriver.findElement(...);
		return we.isDisplayed() ? we : null;
	}
});
----

The code periodically finds element and checks its visibility. 
When element exist and visible it will be returned by `until(..)` method.
To check if element is invisible at the moment we can use similar approach just negating the condition in the function body

== Case #2
There&#39;s another option for dealing with show/hide certain parts of the page. 
Your code can create required HTML on the fly while showing and remove elements from DOM while hiding. 
To check element visibility we can use approach described above. But for checking if the part of the page is not shown to customer 
we can&#39;t use that because there&#39;s no elements in DOM and if we try to use `findElement(...)` we will get the exception.

Issue could be solved by using `WebDriverWait` `findElements(...)` method that doesn&#39;t throw an exception but return empty list if no elements found. 

[source,java]
----
WebDriverWait webDriverWait = new WebDriverWait(webDriver, 10L);
webDriverWait.until(new Predicate&lt;WebDriver&gt;() {
	@Override
	public boolean apply(WebDriver webDriver) {
		return webDriver.findElements(...).size() == 0;
	}
});
----

Code periodically searches for elements matching criteria and return true when no elements found. 

== P.S.

It could save your time and make your code cleaner if you put code samples from above as static methods into utility class.
This allows you to easily reuse such functionality while writing WebDriver tests for your pages.
</description>
        <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/11/seleniumwebdriver-tricks-part-3.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/11/seleniumwebdriver-tricks-part-3.html</guid>
        
        <category>java</category>
        
        <category>webdriver</category>
        
        <category>howto</category>
        
        
      </item>
    
      <item>
        <title>Grails Angularjs Coffeescript</title>
        <description>:imagesdir: /images/2012-07-05

= Grails + AngularJS + CoffeeScript

== Intro

Responsive design is a must for modern web-applications. Today this is attempted to achieve by using JavaScript MVC frameworks.
But more often than not those frameworks originate from `Rails`, `NodeJS` and other non-Java communities.
This makes it hard for Java-boys (as me) to jump into. So purpose of this short tutorial is to explain in few easy steps how to start with JS MVC framework and `CoffeeScript` on `Grails`.

In this certain case `AngularJS` is my personal choice taken up after playing around with few other libraries but principles described below should work for other frameworks.

Our intention will be to write one-page application having single input field and what&#39;s typed there is immediately reflected below in span tag.

I&#39;m assuming readers could be unfamiliar with AngularJS, but, still, the application is really simple and should be easy to read.

== Implementation

First let&#39;s create Grails application::
`grails create-app testApp`

After application is created let&#39;s change folder and all subsequent commands should be executed there::
`cd testApp`

`Grails` already has plugin that support on-the fly conversion of your `CoffeeScript` files into `JavaScript`. To install it type following::
`grails install-plugin coffeescript-resources`

After plugin installed we are going to create empty file for our `CoffeeScript` sources::
`web-app/cs/angularIndex.coffee`

image::2.jpg[]

What&#39;s great about Grails - is the fact that it abounds with plugins. `AngularJS` library can be installed by typing::
`grails install-plugin angularjs-resources`

Thanks to great `resources`  plugin `JavaScript` files management is quite easy in `Grails`::
[source,groovy]
.grails-app/conf/MyResources.groovy
----
modules = {
    angularIndex {
        dependsOn &#39;angular&#39;
        resource url: &#39;cs/angularIndex.coffee&#39;
    }
}
----

Code above declares resource for our AngularJS module written in `CoffeeScript`

image::1.jpg[]

Next we need controller to serve starting point HTML with AngularJS module. We can do it with following command::
`grails create-controller AngularIndex`

Also we need manually create Grails view for index action of our controller.  For this we have to create new file with following content
[source,html]
----
.grails-app/views/angularIndex/index.gsp
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;r:require modules=&quot;angularIndex&quot;/&gt;
    &lt;r:layoutResources/&gt;
&lt;/head&gt;
&lt;body ng-app=&quot;MyApp&quot;&gt;
&lt;div ng-controller=&quot;MyCtrl&quot;&gt;
    What typed reflected below
 
    &lt;input type=&quot;text&quot; ng-model=&quot;myText&quot;/&gt;
 
    &lt;span&gt;&lt;b&gt;&lt;/b&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;r:layoutResources/&gt;
&lt;/html
----
Last step is to create AngularJS module in CoffeeScript. For this we have to fill `web-app/cs/angularIndex.coffee` created before with following content::
[source,coffescript]
.web-app/cs/angularIndex.coffee
----
app = angular.module &quot;MyApp&quot;, []
app.controller &quot;MyCtrl&quot;, ($scope) -&gt;
  $scope.myText = &quot;INITIAL&quot;
----
Let&#39;s run application::
`grails run-app`

image::3.jpg[]

== P.S.

Please notice that setup described above shouldn&#39;t be considered for production usage. 
You probably need minification, zipping resources, etc - but then again it can be good starting point for research, prototyping and similar activities 
towards developing modern front-ends. 

=== Links 

* http://angularjs.org/[AngularJS, window=&quot;_blank&quot;]
* http://coffeescript.org/[CoffeeScript, window=&quot;_blank&quot;]
* http://grails.org/[Grails, window=&quot;_blank&quot;]</description>
        <pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/07/05/grails-angularjs-coffeescript.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/07/05/grails-angularjs-coffeescript.html</guid>
        
        <category>javascript</category>
        
        <category>angularjs</category>
        
        <category>coffeescript</category>
        
        <category>mvc</category>
        
        <category>howto</category>
        
        <category>grails</category>
        
        <category>web</category>
        
        <category>groovy</category>
        
        
      </item>
    
      <item>
        <title>Codingdojocnua 2 Results</title>
        <description>= CodingDojoCnUa #2

On 5th of February our small Cherhihiv community made 2nd _CodingDojo_. 
This time it was dedicated to `JavaScript` programming. 
We tried to code some _Design Patterns_ in new language. 
What we attained during 2 two 1 our long session is following patterns implemented

. Singleton, yeah yeah yeah :)
. Factory method
. Template method v1 (prototype hierarchy)
. Template method v2 (runtime meta-programming)
. Decorator

What we found very good during retrospection is usage of _TimeBox_ policy for changing pilot/co-pilot, 
we used 7 minutes limited time box and `IntelliJ IDEA` `Pomodoro` plugin was helpful on this.

During programming we all suffered of our Java mindset. 
Even plain looking into Wikipedia description and attempt to re-implement `Java` code samples in `JavaScript` were damaging our brains :) 
Lack of interfaces (as in `Java`) and completely different approach of creating class hierarchy slowed down our development speed. 
Another issue was immense scope of our _Dojo_. Certain targets (patterns) were chosen only at the beginning of session and it was a challenge 
to create domain object for certain patterns without detailed design session for which we have no time.

== What we decided to do next

. Pick up and implement some Kata to have more certainty on what we wanna achieve
. Increase time box to 10 minutes, let&#39;s see if helps
. Get some cookies and drinks to not starve during session :)

== My personal observations

The easiest part was `Jasmine`. This BDD tool was adopted seamlessly by all of us since TDD tools and practices are familiar to us from `Java` world 
and `Jasmine` is very similar. 

The hardest was start thinking again in higher level OOP terms, not in their equivalents in `Java`. 
All those interfaces, classes limited to the same named file and other limitation imposed by `Java` were hard to overcome. 
Considering present of duck typing in JavaScript we get rid of interfaces, abstract classes and class hierarchy at all. 
Another uncommon point was API concentrated in module not in class as in `Java` it it was also a bit frustrating from the beginning.

But anyway the coolest thing was our success in short and stressful session as well as knowledge obtained. 
I think attitude to `JavaScript` should change a bit towards paying more respect for this amazing and underestimated language (my IMO though).
</description>
        <pubDate>Mon, 06 Feb 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/02/06/codingdojocnua-2-results.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/02/06/codingdojocnua-2-results.html</guid>
        
        <category>javascript</category>
        
        <category>coding dojo</category>
        
        <category>design pattern</category>
        
        
      </item>
    
      <item>
        <title>Codingdojocnua 2 Agenda And Tools</title>
        <description>= CodingDojoCnUa #2 agenda and tools

== Intro

On 5th of February we are going to have 2nd _CodingDojo_ meeting dedicated to improve our `JavaScript` skills. 
The purpose of our gathering will be implementation of design patterns using `JavaScript` language.
The good list of patterns could be found http://en.wikipedia.org/wiki/Software_design_pattern[Wikipedia page, window=&quot;_blank&quot;].
Please read the list before meeting :)

Links below are also good starting point for exploring `JavaScript`. 
At least skim reading of links below is required before Dojo.

* http://bonsaiden.github.com/JavaScript-Garden[JavaScript Garden - General Guide, window=&quot;_blank&quot;]
* http://www.addyosmani.com/resources/essentialjsdesignpatterns/book[Some Design Patterns already implemented, window=&quot;_blank&quot;] 

== Agenda

We&#39;re going to pair-program using TDD while implementing few of _Software Design Patterns_.
At our previous retro we&#39;ve chosen to use timeboxing for changing pilot/co-pilot. 
Let&#39;s consider our participants gonna change every 5-7 minutes.

[cols=&quot;1,3&quot;]
|===
|Time|Description

|10:30|Start and intro. Decide what exactly we gonna do, so-called _Design Session_
|10:50|1st coding session start
|11:50|Break and _how it&#39;s going_ discussion, maybe lunch ?
|12:20|2nd _Design Session_
|12:30|2nd coding session begin
|13:30|Retro
|14:00|End
|===

Exact agenda timings are subject to change depending on our progress during Dojo.

== Tools we gonna use

We will be using `NodeJS` as our `JavaScript`, `Jasmine` as _TDD/BDD_ framework and `IntelliJ IDEA`.
Although `NodeJS` is rich featured server-side framework we are intended to use it only as JS interpreter.
More docs could be found at http://nodejs.org[NodeJS, window=&quot;_blank&quot;] 

`Jasmine` _BDD_ framework for testing in `JavaScript`. It has support for test suites, human friendly assertions, 
basic mocking support so its good choice for beginners like us :). Find more on their https://github.com/pivotal/jasmine/wiki[Docs page, window=&quot;_blank&quot;]
</description>
        <pubDate>Sat, 28 Jan 2012 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2012/01/28/codingdojocnua-2-agenda-and-tools.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2012/01/28/codingdojocnua-2-agenda-and-tools.html</guid>
        
        <category>coding dojo</category>
        
        <category>howto</category>
        
        
      </item>
    
  </channel>
</rss>
