<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JK&#39;s blog</title>
    <description>Simple blog for some thoughts to be shared. Mostly about Java programming</description>
    <link>http://eshepelyuk.github.io/</link>
    <atom:link href="http://eshepelyuk.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 26 Dec 2015 08:14:46 +0000</pubDate>
    <lastBuildDate>Sat, 26 Dec 2015 08:14:46 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Testing AKKA application with Spock</title>
        <description>&lt;p&gt;&lt;code&gt;AKKA&lt;/code&gt; is message-driven and actor model based concurrency toolkit.
Although it’s written in &lt;code&gt;Scala&lt;/code&gt;, &lt;code&gt;AKKA&lt;/code&gt; can be used in any &lt;code&gt;JVM&lt;/code&gt; based language project.
This post tries to fill the gap of missing information how to write good tests in polyglot JVM projects that leverage &lt;code&gt;AKKA&lt;/code&gt; framework.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2015/12/16/akka-extensions-spock.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2015/12/16/akka-extensions-spock.html</guid>
        
        <category>java</category>
        
        <category>tdd</category>
        
        <category>akka</category>
        
        <category>scala</category>
        
        <category>groovy</category>
        
        <category>spock</category>
        
        
      </item>
    
      <item>
        <title>JVM microservices - JVM based application as Docker container</title>
        <description>&lt;p&gt;Continuation of &lt;code&gt;Windows&lt;/code&gt; and &lt;code&gt;Docker&lt;/code&gt; integration guide.
The goal of this post is to show quick and easy way of creating new &lt;code&gt;JVM&lt;/code&gt; project and run it as a &lt;code&gt;Docker&lt;/code&gt; container on &lt;code&gt;Windows&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2015/12/15/jvm-microservice-sdkman-gradle.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2015/12/15/jvm-microservice-sdkman-gradle.html</guid>
        
        <category>windows</category>
        
        <category>docker</category>
        
        <category>microservice</category>
        
        <category>sdkman</category>
        
        <category>gradle</category>
        
        <category>groovy</category>
        
        
      </item>
    
      <item>
        <title>JVM microservices - run Docker containers on Windows</title>
        <description>&lt;p&gt;&lt;em&gt;Microservices&lt;/em&gt; is one of the loudest IT buzzwords, everybody’s anxious to try it.
But what &lt;code&gt;Linux&lt;/code&gt; and &lt;code&gt;MacOS&lt;/code&gt; users get for free is not so easy in &lt;code&gt;Windows&lt;/code&gt;.
This guide shows how to setup &lt;code&gt;Windows&lt;/code&gt; environment for running &lt;code&gt;Docker&lt;/code&gt; containers, as a basis for &lt;em&gt;microservice architecture&lt;/em&gt; projects.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
        <link>http://eshepelyuk.github.io/2015/11/26/jvm-microservice-docker-windows.html</link>
        <guid isPermaLink="true">http://eshepelyuk.github.io/2015/11/26/jvm-microservice-docker-windows.html</guid>
        
        <category>windows</category>
        
        <category>docker</category>
        
        <category>microservice</category>
        
        <category>msys2</category>
        
        <category>conemu</category>
        
        
      </item>
    
  </channel>
</rss>
